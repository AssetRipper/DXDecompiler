//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   int $NumBones;
//   float4 MaterialAmbient;
//   float4 MaterialDiffuse;
//   float4 lhtDir;
//   float4x4 mViewProj;
//   float4x3 mWorldMatrixArray[26];
//
//
// Registers:
//
//   Name              Reg   Size
//   ----------------- ----- ----
//   mWorldMatrixArray c0      78
//   mViewProj         c78      4
//   lhtDir            c82      1
//   MaterialAmbient   c83      1
//   MaterialDiffuse   c84      1
//   $NumBones         c85      1
//

    vs_2_0
    def c90, 255.001953, 765.005859, 2, 3
    def c86, 1, 0, 0, 0
    def c87, 0, 1, 0, 0
    def c88, 0, 0, 1, 0
    def c89, 0, 0, 0, 1
    dcl_position v0
    dcl_blendweight v1
    dcl_blendindices v2
    dcl_normal v3
    dcl_texcoord v4
    mul r0, v2.zyxw, c90.y
    mova a0, r0
    dp3 r1.x, v3, c0[a0.x]
    dp3 r1.y, v3, c1[a0.x]
    dp3 r1.z, v3, c2[a0.x]
    mul r1.xyz, r1, v1.x
    mov r1.w, v1.x
    mov r0.x, c86.x
    add r0.x, -r0.x, c85.x
    slt r2.w, c86.w, r0.x
    mul r3, r1, r2.w
    dp3 r4.x, v3, c0[a0.y]
    dp3 r4.y, v3, c1[a0.y]
    dp3 r4.z, v3, c2[a0.y]
    mad r4.xyz, r4, v1.y, r3
    mad r4.w, r2.w, r1.w, v1.y
    mad r1, r2.w, -r1, r4
    slt r0.y, r2.w, r0.x
    mad r1, r0.y, r1, r3
    dp3 r3.x, v3, c0[a0.z]
    dp3 r3.y, v3, c1[a0.z]
    dp3 r3.z, v3, c2[a0.z]
    mad r3.xyz, r3, v1.z, r1
    add r3.w, r1.w, v1.z
    dp4 r4.x, v0, c0[a0.x]
    dp4 r4.y, v0, c1[a0.x]
    dp4 r4.z, v0, c2[a0.x]
    mul r4.xyz, r4, v1.x
    mul r2.xyz, r2.w, r4
    dp4 r4.x, v0, c0[a0.y]
    dp4 r4.y, v0, c1[a0.y]
    dp4 r4.z, v0, c2[a0.y]
    mad r4.xyz, r4, v1.y, r2
    mov r4.w, c90.z
    lrp r5, r0.y, r4, r2
    slt r0.z, r5.w, r0.x
    mul r0.y, r0.z, r0.y
    lrp r2, r0.y, r3, r1
    add r1.w, r2.w, v1.w
    dp3 r3.x, v3, c0[a0.w]
    dp3 r3.y, v3, c1[a0.w]
    dp3 r3.z, v3, c2[a0.w]
    mad r1.xyz, r3, v1.w, r2
    dp4 r3.x, v0, c0[a0.z]
    dp4 r3.y, v0, c1[a0.z]
    dp4 r3.z, v0, c2[a0.z]
    mad r3.xyz, r3, v1.z, r5
    mov r3.w, c90.w
    lrp r4, r0.y, r3, r5
    slt r0.z, r4.w, r0.x
    mova a0.x, r0.x
    mul r0.x, r0.z, r0.y
    lrp r3, r0.x, r1, r2
    add r0.y, -r3.w, c86.x
    dp4 r1.x, v0, c0[a0.w]
    dp4 r1.y, v0, c1[a0.w]
    dp4 r1.z, v0, c2[a0.w]
    mul r1.xyz, r1, v1.w
    mad r0.xzw, r0.x, r1.xyyz, r4.xyyz
    mul r1, v2.zyxw, c90.x
    dp4 r1.x, r1, c86[a0.x]
    mul r1.x, r1.x, c90.w
    mova a0.x, r1.x
    dp4 r1.x, v0, c0[a0.x]
    dp4 r1.y, v0, c1[a0.x]
    dp4 r1.z, v0, c2[a0.x]
    mad r1.xyz, r1, r0.y, r0.xzww
    mov r1.w, c86.x
    dp4 oPos.x, r1, c78
    dp4 oPos.y, r1, c79
    dp4 oPos.z, r1, c80
    dp4 oPos.w, r1, c81
    dp3 r1.x, v3, c0[a0.x]
    dp3 r1.y, v3, c1[a0.x]
    dp3 r1.z, v3, c2[a0.x]
    mad r0.xyz, r1, r0.y, r3
    nrm r1.xyz, r0
    dp3 r0.x, r1, c82
    max r0.x, r0.x, c86.w
    mov r1.xyz, c84
    mad oD0.xyz, r0.x, r1, c83
    mov oD0.w, c86.x
    mov oT0.xy, v4

// approximately 85 instruction slots used
