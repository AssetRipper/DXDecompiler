//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbSimulationConstants
// {
//
//   uint g_iNumParticles;              // Offset:    0 Size:     4 [unused]
//   float g_fTimeStep;                 // Offset:    4 Size:     4 [unused]
//   float g_fSmoothlen;                // Offset:    8 Size:     4
//   float g_fPressureStiffness;        // Offset:   12 Size:     4 [unused]
//   float g_fRestDensity;              // Offset:   16 Size:     4 [unused]
//   float g_fDensityCoef;              // Offset:   20 Size:     4
//   float g_fGradPressureCoef;         // Offset:   24 Size:     4 [unused]
//   float g_fLapViscosityCoef;         // Offset:   28 Size:     4 [unused]
//   float g_fWallStiffness;            // Offset:   32 Size:     4 [unused]
//   float4 g_vGravity;                 // Offset:   48 Size:    16 [unused]
//   float4 g_vGridDim;                 // Offset:   64 Size:    16
//   float3 g_vPlanes[4];               // Offset:   80 Size:    60 [unused]
//
// }
//
// Resource bind info for ParticlesRO
// {
//
//   struct Particle
//   {
//       
//       float2 position;               // Offset:    0
//       float2 velocity;               // Offset:    8
//
//   } $Element;                        // Offset:    0 Size:    16
//
// }
//
// Resource bind info for GridIndicesRO
// {
//
//   uint2 $Element;                    // Offset:    0 Size:     8
//
// }
//
// Resource bind info for ParticlesDensityRW
// {
//
//   struct ParticleDensity
//   {
//       
//       float density;                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// ParticlesRO                       texture  struct         r/o             t0      1 
// GridIndicesRO                     texture  struct         r/o             t4      1 
// ParticlesDensityRW                    UAV  struct         r/w             u0      1 
// cbSimulationConstants             cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[5], immediateIndexed
dcl_resource_structured t0, 16
dcl_resource_structured t4, 8
dcl_uav_structured u0, 4
dcl_input vThreadID.x
dcl_temps 5
dcl_thread_group 256, 1, 1
mul r0.x, cb0[0].z, cb0[0].z
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r0.yz, vThreadID.x, l(0), t0.xxyx
mad r1.xyzw, r0.zzyy, cb0[4].yyxx, cb0[4].wwzz
max r1.xyzw, r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
min r1.xyzw, r1.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000)
ftoi r1.xyzw, r1.xyzw
iadd r1.xyzw, r1.xyzw, l(-1, 1, -1, 1)
imax r1.xz, r1.xxzx, l(0, 0, 0, 0)
imin r1.yw, r1.yyyw, l(0, 255, 0, 255)
mov r0.w, l(0)
mov r2.x, r1.x
loop 
  ilt r2.y, r1.y, r2.x
  breakc_nz r2.y
  ishl r2.y, r2.x, l(8)
  mov r2.z, r0.w
  mov r2.w, r1.z
  loop 
    ilt r3.x, r1.w, r2.w
    breakc_nz r3.x
    iadd r3.x, r2.w, r2.y
    ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r3.xy, r3.x, l(0), t4.xyxx
    mov r3.z, r2.z
    mov r3.w, r3.x
    loop 
      uge r4.x, r3.w, r3.y
      breakc_nz r4.x
      ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r4.xy, r3.w, l(0), t0.xyxx
      add r4.xy, -r0.yzyy, r4.xyxx
      dp2 r4.x, r4.xyxx, r4.xyxx
      lt r4.y, r4.x, r0.x
      mad r4.x, cb0[0].z, cb0[0].z, -r4.x
      mul r4.z, r4.x, r4.x
      mul r4.z, r4.z, cb0[1].y
      mad r4.x, r4.z, r4.x, r3.z
      movc r3.z, r4.y, r4.x, r3.z
      iadd r3.w, r3.w, l(1)
    endloop 
    mov r2.z, r3.z
    iadd r2.w, r2.w, l(1)
  endloop 
  mov r0.w, r2.z
  iadd r2.x, r2.x, l(1)
endloop 
store_structured u0.x, vThreadID.x, l(0), r0.w
ret 
// Approximately 46 instruction slots used
