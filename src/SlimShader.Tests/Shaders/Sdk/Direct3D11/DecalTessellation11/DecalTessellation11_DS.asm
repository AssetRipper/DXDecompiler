//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbUpdate
// {
//
//   float4x4 g_mWorld;                 // Offset:    0 Size:    64 [unused]
//   float4x4 g_mViewProjection;        // Offset:   64 Size:    64
//   float4x4 g_mWorldViewProjection;   // Offset:  128 Size:    64 [unused]
//   float4 g_vTessellationFactor;      // Offset:  192 Size:    16 [unused]
//   float4 g_vDisplacementScaleBias;   // Offset:  208 Size:    16
//   float4 g_vLightPosition;           // Offset:  224 Size:    16
//   float4 g_vEyePosition;             // Offset:  240 Size:    16
//
// }
//
// cbuffer cbDamage
// {
//
//   float4 g_vNormal[50];              // Offset:    0 Size:   800
//   float4 g_vBinormal[50];            // Offset:  800 Size:   800
//   float4 g_vTangent[50];             // Offset: 1600 Size:   800
//   float4 g_vDecalPositionSize[50];   // Offset: 2400 Size:   800
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// g_sampleLinear                    sampler      NA          NA             s0      1 
// g_DisplacementMap                 texture  float4          2d             t0      1 
// cbUpdate                          cbuffer      NA          NA            cb1      1 
// cbDamage                          cbuffer      NA          NA            cb2      1 
//
//
//
// Patch Constant signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TessFactor            0   x           0  TRIEDGE   float       
// SV_TessFactor            1   x           1  TRIEDGE   float       
// SV_TessFactor            2   x           2  TRIEDGE   float       
// SV_InsideTessFactor      0   x           3   TRIINT   float       
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// WORLDPOS                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// NORMAL                   0   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// LIGHTVECTORTS            0   xyz         4     NONE   float   xyz 
// LIGHTVECTORWS            0   xyz         5     NONE   float   xyz 
// VIEWVECTORTS             0   xyz         6     NONE   float   xyz 
// VIEWVECTORWS             0   xyz         7     NONE   float   xyz 
//
// Tessellation Domain   # of control points
// -------------------- --------------------
// Triangle                                3
//
ds_5_0
dcl_input_control_point_count 3
dcl_tessellator_domain domain_tri
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[16], immediateIndexed
dcl_constantbuffer CB2[200], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input vDomain.xyz
dcl_input vicp[3][0].xyz
dcl_input vicp[3][1].xy
dcl_input vicp[3][2].xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xyz
dcl_temps 16
mul r0.xyz, vDomain.yyyy, vicp[1][0].xyzx
mad r0.xyz, vDomain.xxxx, vicp[0][0].xyzx, r0.xyzx
mad r0.xyz, vDomain.zzzz, vicp[2][0].xyzx, r0.xyzx
mul r1.xy, vDomain.yyyy, vicp[1][1].xyxx
mad r1.xy, vDomain.xxxx, vicp[0][1].xyxx, r1.xyxx
mad o1.xy, vDomain.zzzz, vicp[2][1].xyxx, r1.xyxx
mul r1.xyz, vDomain.yyyy, vicp[1][2].xyzx
mad r1.xyz, vDomain.xxxx, vicp[0][2].xyzx, r1.xyzx
mad r1.xyz, vDomain.zzzz, vicp[2][2].xyzx, r1.xyzx
add r2.xyz, -r0.xyzx, cb1[14].xyzx
add r3.xyz, -r0.xyzx, cb1[15].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r1.xyzx
mov r5.z, l(1.000000)
mov r6.xyz, l(0,0,0,0)
mov r7.xyz, r2.xyzx
mov r8.xyz, r3.xyzx
mov r9.xyz, r0.xyzx
mov r0.w, l(0)
loop 
  ige r1.w, r0.w, l(50)
  breakc_nz r1.w
  eq r10.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), cb2[r0.w + 0].xyzx
  and r1.w, r10.y, r10.x
  and r1.w, r10.z, r1.w
  if_nz r1.w
    break 
  endif 
  add r10.xyz, r9.xyzx, -cb2[r0.w + 150].xyzx
  dp3 r1.w, r10.xyzx, r10.xyzx
  sqrt r1.w, r1.w
  ge r1.w, cb2[r0.w + 150].w, r1.w
  if_nz r1.w
    dp3 r1.w, r4.xyzx, cb2[r0.w + 100].xyzx
    dp3 r2.w, r4.xyzx, cb2[r0.w + 50].xyzx
    lt r1.w, |r1.w|, |r2.w|
    mul r11.xyz, r4.zxyz, cb2[r0.w + 100].yzxy
    mad r11.xyz, r4.yzxy, cb2[r0.w + 100].zxyz, -r11.xyzx
    dp3 r2.w, r11.xyzx, r11.xyzx
    rsq r2.w, r2.w
    mul r11.xyz, r2.wwww, r11.xyzx
    mul r12.xyz, r4.yzxy, r11.zxyz
    mad r12.xyz, r11.yzxy, r4.zxyz, -r12.xyzx
    mul r13.xyz, r4.zxyz, cb2[r0.w + 50].yzxy
    mad r13.xyz, r4.yzxy, cb2[r0.w + 50].zxyz, -r13.xyzx
    dp3 r2.w, r13.xyzx, r13.xyzx
    rsq r2.w, r2.w
    mul r13.xyz, r2.wwww, r13.xyzx
    mul r14.xyz, r4.yzxy, r13.zxyz
    mad r14.xyz, r13.yzxy, r4.zxyz, -r14.xyzx
    movc r11.xyz, r1.wwww, r11.xyzx, r14.xyzx
    movc r12.xyz, r1.wwww, r12.xyzx, r13.xyzx
    dp3 r13.x, cb2[r0.w + 100].xyzx, r10.xyzx
    dp3 r13.y, cb2[r0.w + 50].xyzx, r10.xyzx
    add r1.w, cb2[r0.w + 150].w, cb2[r0.w + 150].w
    div r10.xy, r13.xyxx, r1.wwww
    add r5.xy, r10.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
    sample_l_indexable(texture2d)(float,float,float,float) r1.w, r5.xyxx, t0.yzwx, s0, l(0.000000)
    mad r1.w, r1.w, cb1[13].x, cb1[13].y
    mad r10.xyz, -cb2[r0.w + 0].xyzx, r1.wwww, r9.xyzx
    add r13.xyz, -r10.xyzx, cb1[14].xyzx
    add r14.xyz, -r10.xyzx, cb1[15].xyzx
    dp3 r15.x, r12.xyzx, r13.xyzx
    dp3 r15.y, r11.xyzx, r13.xyzx
    dp3 r15.z, r4.xyzx, r13.xyzx
    dp3 r12.x, r12.xyzx, r14.xyzx
    dp3 r12.y, r11.xyzx, r14.xyzx
    dp3 r12.z, r4.xyzx, r14.xyzx
    mov r6.xyz, r5.xyzx
    mov r7.xyz, r15.xyzx
    mov r8.xyz, r12.xyzx
    mov r9.xyz, r10.xyzx
    break 
  endif 
  iadd r0.w, r0.w, l(1)
  mov r6.xyz, l(0,0,0,0)
endloop 
mov o3.xyz, r6.xyzx
mov o4.xyz, r7.xyzx
mov o6.xyz, r8.xyzx
mov r9.w, l(1.000000)
dp4 o0.x, r9.xyzw, cb1[4].xyzw
dp4 o0.y, r9.xyzw, cb1[5].xyzw
dp4 o0.z, r9.xyzw, cb1[6].xyzw
dp4 o0.w, r9.xyzw, cb1[7].xyzw
mov o2.xyz, r1.xyzx
mov o5.xyz, r2.xyzx
mov o7.xyz, r3.xyzx
ret 
// Approximately 90 instruction slots used
