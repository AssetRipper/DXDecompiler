//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbTangentStencilConstants
// {
//
//   float g_TanM[1024];                // Offset:    0 Size: 16372 [unused]
//   float g_fCi[16];                   // Offset: 16384 Size:   244
//
// }
//
// cbuffer cbPerFrame
// {
//
//   float4x4 g_mViewProjection;        // Offset:    0 Size:    64 [unused]
//   float3 g_vCameraPosWorld;          // Offset:   64 Size:    12 [unused]
//   float g_fTessellationFactor;       // Offset:   76 Size:     4
//   float g_fDisplacementHeight;       // Offset:   80 Size:     4 [unused]
//   float3 g_vSolidColor;              // Offset:   84 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cbTangentStencilConstants         cbuffer      NA          NA            cb0      1 
// cbPerFrame                        cbuffer      NA          NA            cb2      1 
//
//
//
// Patch Constant signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TessFactor            0   x           0 QUADEDGE   float   x   
// SV_TessFactor            1   x           1 QUADEDGE   float   x   
// SV_TessFactor            2   x           2 QUADEDGE   float   x   
// SV_TessFactor            3   x           3 QUADEDGE   float   x   
// SV_InsideTessFactor      0   x           4  QUADINT   float   x   
// SV_InsideTessFactor      1   x           5  QUADINT   float   x   
// TANGENT                  0   xyz         6     NONE   float   xyz 
// TANGENT                  1   xyz         7     NONE   float   xyz 
// TANGENT                  2   xyz         8     NONE   float   xyz 
// TANGENT                  3   xyz         9     NONE   float   xyz 
// TEXCOORD                 0   xy         10     NONE   float   xy  
// TEXCOORD                 1   xy         11     NONE   float   xy  
// TEXCOORD                 2   xy         12     NONE   float   xy  
// TEXCOORD                 3   xy         13     NONE   float   xy  
// TANUCORNER               0   xyz        14     NONE   float   xyz 
// TANUCORNER               1   xyz        15     NONE   float   xyz 
// TANUCORNER               2   xyz        16     NONE   float   xyz 
// TANUCORNER               3   xyz        17     NONE   float   xyz 
// TANVCORNER               0   xyz        18     NONE   float   xyz 
// TANVCORNER               1   xyz        19     NONE   float   xyz 
// TANVCORNER               2   xyz        20     NONE   float   xyz 
// TANVCORNER               3   xyz        21     NONE   float   xyz 
// TANWEIGHTS               0   xyzw       22     NONE   float   xyzw
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// WORLDPOS                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TANGENT                  0   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// BEZIERPOS                0   xyz         0     NONE   float   xyz 
//
// Tessellation Domain   # of control points
// -------------------- --------------------
// Quadrilateral                          16
//
// Tessellation Output Primitive  Partitioning Type 
// ------------------------------ ------------------
// Clockwise Triangles            Integer           
//
hs_5_0
hs_decls 
dcl_input_control_point_count 32
dcl_output_control_point_count 16
dcl_tessellator_domain domain_quad
dcl_tessellator_partitioning partitioning_integer
dcl_tessellator_output_primitive output_triangle_cw
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0, 0, 6, 3},
                              { 2, 3, 9, 0},
                              { 0, 3, 9, 2},
                              { 2, 6, 0, 0},
                              { 4, 6, 3, 2},
                              { 7, 0, 3, 0},
                              { -2, -1, 6, 0},
                              { 0, 9, 3, 2},
                              { 6, 6, 0, 0},
                              { 6, 9, 3, 9},
                              { 0, 0, 6, 0},
                              { 0, 0, 0, 3} }
dcl_constantbuffer CB0[1026], dynamicIndexed
dcl_constantbuffer CB2[5], immediateIndexed
hs_control_point_phase 
dcl_input vOutputControlPointID
dcl_input v[32][0].xyz
dcl_output o0.xyz
dcl_temps 2
switch vOutputControlPointID
  case l(5)
  add r1.xyz, v[1][0].xyzx, v[1][0].xyzx
  mad r1.xyz, v[0][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[2][0].xyzx
  mad r1.xyz, v[3][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
  mul r0.xyz, r1.xyzx, l(0.111111, 0.111111, 0.111111, 0.000000)
  break 
  case l(6)
  add r1.xyz, v[0][0].xyzx, v[0][0].xyzx
  mad r1.xyz, v[1][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  mad r1.xyz, v[2][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[3][0].xyzx
  mul r0.xyz, r1.xyzx, l(0.111111, 0.111111, 0.111111, 0.000000)
  break 
  case l(10)
  mad r1.xyz, v[1][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), v[0][0].xyzx
  mad r1.xyz, v[2][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  mad r1.xyz, v[3][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
  mul r0.xyz, r1.xyzx, l(0.111111, 0.111111, 0.111111, 0.000000)
  break 
  case l(9)
  mad r1.xyz, v[0][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), v[1][0].xyzx
  mad r1.xyz, v[2][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
  mad r1.xyz, v[3][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  mul r0.xyz, r1.xyzx, l(0.111111, 0.111111, 0.111111, 0.000000)
  break 
  case l(0)
  mul r1.xyz, l(4.000000, 4.000000, 4.000000, 0.000000), v[4][0].xyzx
  mad r1.xyz, v[0][0].xyzx, l(16.000000, 16.000000, 16.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[5][0].xyzx
  mad r1.xyz, v[6][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[7][0].xyzx
  add r1.xyz, r1.xyzx, v[15][0].xyzx
  mad r1.xyz, v[1][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[2][0].xyzx
  mad r1.xyz, v[3][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  mul r0.xyz, r1.xyzx, l(0.027778, 0.027778, 0.027778, 0.000000)
  break 
  case l(3)
  mul r1.xyz, l(4.000000, 4.000000, 4.000000, 0.000000), v[7][0].xyzx
  mad r1.xyz, v[1][0].xyzx, l(16.000000, 16.000000, 16.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[8][0].xyzx
  mad r1.xyz, v[9][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[10][0].xyzx
  add r1.xyz, r1.xyzx, v[6][0].xyzx
  mad r1.xyz, v[2][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[3][0].xyzx
  mad r1.xyz, v[0][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  mul r0.xyz, r1.xyzx, l(0.027778, 0.027778, 0.027778, 0.000000)
  break 
  case l(15)
  mul r1.xyz, l(4.000000, 4.000000, 4.000000, 0.000000), v[10][0].xyzx
  mad r1.xyz, v[2][0].xyzx, l(16.000000, 16.000000, 16.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[11][0].xyzx
  mad r1.xyz, v[12][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[13][0].xyzx
  add r1.xyz, r1.xyzx, v[9][0].xyzx
  mad r1.xyz, v[3][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[0][0].xyzx
  mad r1.xyz, v[1][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  mul r0.xyz, r1.xyzx, l(0.027778, 0.027778, 0.027778, 0.000000)
  break 
  case l(12)
  mul r1.xyz, l(4.000000, 4.000000, 4.000000, 0.000000), v[13][0].xyzx
  mad r1.xyz, v[3][0].xyzx, l(16.000000, 16.000000, 16.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[14][0].xyzx
  mad r1.xyz, v[15][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[4][0].xyzx
  add r1.xyz, r1.xyzx, v[12][0].xyzx
  mad r1.xyz, v[0][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[1][0].xyzx
  mad r1.xyz, v[2][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  mul r0.xyz, r1.xyzx, l(0.027778, 0.027778, 0.027778, 0.000000)
  break 
  case l(1)
  mul r1.xyz, l(4.000000, 4.000000, 4.000000, 0.000000), v[1][0].xyzx
  mad r1.xyz, v[0][0].xyzx, l(8.000000, 8.000000, 8.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[2][0].xyzx
  mad r1.xyz, v[3][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
  mad r1.xyz, v[6][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[7][0].xyzx
  mul r0.xyz, r1.xyzx, l(0.055556, 0.055556, 0.055556, 0.000000)
  break 
  case l(2)
  mul r1.xyz, l(8.000000, 8.000000, 8.000000, 0.000000), v[1][0].xyzx
  mad r1.xyz, v[0][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  mad r1.xyz, v[2][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[3][0].xyzx
  add r1.xyz, r1.xyzx, v[6][0].xyzx
  mad r1.xyz, v[7][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
  mul r0.xyz, r1.xyzx, l(0.055556, 0.055556, 0.055556, 0.000000)
  break 
  case l(13)
  mad r1.xyz, v[0][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), v[1][0].xyzx
  mad r1.xyz, v[2][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  mad r1.xyz, v[3][0].xyzx, l(8.000000, 8.000000, 8.000000, 0.000000), r1.xyzx
  mad r1.xyz, v[13][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[12][0].xyzx
  mul r0.xyz, r1.xyzx, l(0.055556, 0.055556, 0.055556, 0.000000)
  break 
  case l(14)
  mad r1.xyz, v[1][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), v[0][0].xyzx
  mad r1.xyz, v[2][0].xyzx, l(8.000000, 8.000000, 8.000000, 0.000000), r1.xyzx
  mad r1.xyz, v[3][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[13][0].xyzx
  mad r1.xyz, v[12][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
  mul r0.xyz, r1.xyzx, l(0.055556, 0.055556, 0.055556, 0.000000)
  break 
  case l(4)
  add r1.xyz, v[1][0].xyzx, v[1][0].xyzx
  mad r1.xyz, v[0][0].xyzx, l(8.000000, 8.000000, 8.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[2][0].xyzx
  mad r1.xyz, v[3][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  mad r1.xyz, v[4][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[15][0].xyzx
  mul r0.xyz, r1.xyzx, l(0.055556, 0.055556, 0.055556, 0.000000)
  break 
  case l(8)
  mad r1.xyz, v[0][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), v[1][0].xyzx
  mad r1.xyz, v[2][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
  mad r1.xyz, v[3][0].xyzx, l(8.000000, 8.000000, 8.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[4][0].xyzx
  mad r1.xyz, v[15][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
  mul r0.xyz, r1.xyzx, l(0.055556, 0.055556, 0.055556, 0.000000)
  break 
  case l(7)
  add r1.xyz, v[0][0].xyzx, v[0][0].xyzx
  mad r1.xyz, v[1][0].xyzx, l(8.000000, 8.000000, 8.000000, 0.000000), r1.xyzx
  mad r1.xyz, v[2][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[3][0].xyzx
  mad r1.xyz, v[9][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[10][0].xyzx
  mul r0.xyz, r1.xyzx, l(0.055556, 0.055556, 0.055556, 0.000000)
  break 
  case l(11)
  mad r1.xyz, v[1][0].xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), v[0][0].xyzx
  mad r1.xyz, v[2][0].xyzx, l(8.000000, 8.000000, 8.000000, 0.000000), r1.xyzx
  mad r1.xyz, v[3][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
  add r1.xyz, r1.xyzx, v[9][0].xyzx
  mad r1.xyz, v[10][0].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
  mul r0.xyz, r1.xyzx, l(0.055556, 0.055556, 0.055556, 0.000000)
  break 
  default 
  mov r0.xyz, l(0,0,0,0)
  break 
endswitch 
mov o0.xyz, r0.xyzx
ret 
hs_fork_phase 
dcl_hs_fork_phase_instance_count 4
dcl_input vForkInstanceID
dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
dcl_temps 1
dcl_indexrange o0.x 4
mov r0.x, vForkInstanceID.x
mov o[r0.x + 0].x, cb2[4].w
ret 
hs_fork_phase 
dcl_hs_fork_phase_instance_count 2
dcl_input vForkInstanceID
dcl_output_siv o4.x, finalQuadUInsideTessFactor
dcl_output_siv o5.x, finalQuadVInsideTessFactor
dcl_temps 1
dcl_indexrange o4.x 2
mov r0.x, vForkInstanceID.x
mov o[r0.x + 4].x, cb2[4].w
ret 
hs_fork_phase 
dcl_hs_fork_phase_instance_count 8
dcl_input vForkInstanceID
dcl_input vicp[32][0].x
dcl_input vicp[32][1].x
dcl_input vicp[32][2].x
dcl_output o6.x
dcl_output o7.x
dcl_output o8.x
dcl_output o9.x
dcl_output o10.x
dcl_output o11.x
dcl_output o12.x
dcl_output o13.x
dcl_temps 1
dcl_indexrange o6.x 8
dcl_indexrange vicp[32][0].x 3
ult r0.x, vForkInstanceID.x, l(4)
and r0.x, r0.x, l(1)
and r0.y, vForkInstanceID.x, l(3)
mov r0.z, vForkInstanceID.x
mov o[r0.z + 6].x, vicp[r0.y + 0][r0.x + 1].x
ret 
hs_fork_phase 
dcl_hs_fork_phase_instance_count 8
dcl_input vForkInstanceID
dcl_input vicp[32][0].y
dcl_input vicp[32][1].y
dcl_input vicp[32][2].y
dcl_output o6.y
dcl_output o7.y
dcl_output o8.y
dcl_output o9.y
dcl_output o10.y
dcl_output o11.y
dcl_output o12.y
dcl_output o13.y
dcl_temps 1
dcl_indexrange o6.y 8
dcl_indexrange vicp[32][0].y 3
ult r0.x, vForkInstanceID.x, l(4)
and r0.x, r0.x, l(1)
and r0.y, vForkInstanceID.x, l(3)
mov r0.z, vForkInstanceID.x
mov o[r0.z + 6].y, vicp[r0.y + 0][r0.x + 1].y
ret 
hs_fork_phase 
dcl_hs_fork_phase_instance_count 4
dcl_input vForkInstanceID
dcl_input vicp[32][2].z
dcl_output o6.z
dcl_output o7.z
dcl_output o8.z
dcl_output o9.z
dcl_temps 1
dcl_indexrange o6.z 4
mov r0.x, vForkInstanceID.x
mov o[r0.x + 6].z, vicp[r0.x + 0][2].z
ret 
hs_fork_phase 
dcl_hs_fork_phase_instance_count 4
dcl_input vForkInstanceID
dcl_input vicp[32][0].x
dcl_output o14.x
dcl_output o17.x
dcl_output o18.x
dcl_output o19.x
dcl_temps 2
dcl_indexrange o14.x 6
mov r0.x, vForkInstanceID.x
mov r0.y, icb[r0.x + 8].w
mov r0.z, icb[r0.x + 4].w
mul r0.w, cb0[r0.z + 259].x, vicp[r0.y + 5][0].x
mad r0.w, vicp[r0.y + 4][0].x, cb0[r0.z + 258].x, r0.w
mad r0.y, vicp[r0.y + 6][0].x, cb0[r0.z + 260].x, r0.w
mov r0.w, icb[r0.x + 7].z
mad r0.y, vicp[r0.w + 4][0].x, cb0[r0.z + 261].x, r0.y
mov r0.w, icb[r0.x + 7].y
mov r0.x, icb[r0.x + 2].y
mad r0.y, vicp[r0.w + 6][0].x, cb0[r0.z + 257].x, r0.y
iadd r1.xyz, vForkInstanceID.xxxx, l(-1, 1, 2, 0)
ult r0.w, vForkInstanceID.x, l(1)
movc r1.xz, r0.wwww, l(1,0,0,0), r1.xxzx
and r1.y, r1.y, l(3)
movc r0.w, r0.w, l(3), r1.y
mad r0.y, vicp[r1.x + 0][0].x, cb0[r0.x + 256].x, r0.y
mad r0.x, vicp[r1.x + 1][0].x, cb0[r0.x + 257].x, r0.y
mad o[r1.z + 14].x, vicp[r0.w + 0][0].x, cb0[r0.z + 256].x, r0.x
ret 
hs_fork_phase 
dcl_hs_fork_phase_instance_count 4
dcl_input vForkInstanceID
dcl_input vicp[32][0].y
dcl_output o14.y
dcl_output o17.y
dcl_output o18.y
dcl_output o19.y
dcl_temps 2
dcl_indexrange o14.y 6
mov r0.x, vForkInstanceID.x
mov r0.y, icb[r0.x + 8].w
mov r0.z, icb[r0.x + 4].w
mul r0.w, cb0[r0.z + 259].x, vicp[r0.y + 5][0].y
mad r0.w, vicp[r0.y + 4][0].y, cb0[r0.z + 258].x, r0.w
mad r0.y, vicp[r0.y + 6][0].y, cb0[r0.z + 260].x, r0.w
mov r0.w, icb[r0.x + 7].z
mad r0.y, vicp[r0.w + 4][0].y, cb0[r0.z + 261].x, r0.y
mov r0.w, icb[r0.x + 7].y
mov r0.x, icb[r0.x + 2].y
mad r0.y, vicp[r0.w + 6][0].y, cb0[r0.z + 257].x, r0.y
iadd r1.xyz, vForkInstanceID.xxxx, l(-1, 1, 2, 0)
ult r0.w, vForkInstanceID.x, l(1)
movc r1.xz, r0.wwww, l(1,0,0,0), r1.xxzx
and r1.y, r1.y, l(3)
movc r0.w, r0.w, l(3), r1.y
mad r0.y, vicp[r1.x + 0][0].y, cb0[r0.x + 256].x, r0.y
mad r0.x, vicp[r1.x + 1][0].y, cb0[r0.x + 257].x, r0.y
mad o[r1.z + 14].y, vicp[r0.w + 0][0].y, cb0[r0.z + 256].x, r0.x
ret 
hs_fork_phase 
dcl_hs_fork_phase_instance_count 4
dcl_input vForkInstanceID
dcl_input vicp[32][0].z
dcl_output o14.z
dcl_output o17.z
dcl_output o18.z
dcl_output o19.z
dcl_temps 2
dcl_indexrange o14.z 6
mov r0.x, vForkInstanceID.x
mov r0.y, icb[r0.x + 8].w
mov r0.z, icb[r0.x + 4].w
mul r0.w, cb0[r0.z + 259].x, vicp[r0.y + 5][0].z
mad r0.w, vicp[r0.y + 4][0].z, cb0[r0.z + 258].x, r0.w
mad r0.y, vicp[r0.y + 6][0].z, cb0[r0.z + 260].x, r0.w
mov r0.w, icb[r0.x + 7].z
mad r0.y, vicp[r0.w + 4][0].z, cb0[r0.z + 261].x, r0.y
mov r0.w, icb[r0.x + 7].y
mov r0.x, icb[r0.x + 7].x
mad r0.y, vicp[r0.w + 6][0].z, cb0[r0.z + 257].x, r0.y
iadd r1.xyz, vForkInstanceID.xxxx, l(-1, 1, 2, 0)
ult r0.w, vForkInstanceID.x, l(1)
movc r1.xz, r0.wwww, l(1,0,0,0), r1.xxzx
and r1.y, r1.y, l(3)
movc r0.w, r0.w, l(3), r1.y
mad r0.y, vicp[r1.x + 0][0].z, cb0[r0.x + 256].x, r0.y
mad r0.x, vicp[r1.x + 1][0].z, cb0[r0.x + 257].x, r0.y
mad o[r1.z + 14].z, vicp[r0.w + 0][0].z, cb0[r0.z + 256].x, r0.x
ret 
hs_fork_phase 
dcl_hs_fork_phase_instance_count 4
dcl_input vForkInstanceID
dcl_input vicp[32][0].x
dcl_output o15.x
dcl_output o16.x
dcl_output o20.x
dcl_output o21.x
dcl_temps 3
dcl_indexrange o15.x 7
mov r0.x, vForkInstanceID.x
mov r0.y, icb[r0.x + 3].z
mov r0.z, icb[r0.x + 1].w
mov r0.x, icb[r0.x + 0].z
mul r0.w, cb0[r0.z + 259].x, vicp[r0.y + 8][0].x
mad r0.w, vicp[r0.y + 7][0].x, cb0[r0.z + 258].x, r0.w
mad r0.w, vicp[r0.y + 9][0].x, cb0[r0.z + 260].x, r0.w
mad r0.x, vicp[r0.x + 4][0].x, cb0[r0.z + 261].x, r0.w
mad r0.x, vicp[r0.y + 6][0].x, cb0[r0.z + 257].x, r0.x
iadd r0.y, vForkInstanceID.x, l(4)
udiv null, r0.y, r0.y, l(7)
iadd r1.xyzw, vForkInstanceID.xxxx, l(2, 1, 6, 3)
udiv null, r0.w, r1.z, l(7)
ult r1.z, vForkInstanceID.x, l(2)
movc r0.y, r1.z, r0.w, r0.y
and r2.xy, r1.ywyy, l(3, 3, 0, 0)
movc r0.w, r1.z, r1.x, r2.x
movc r1.x, r1.z, vForkInstanceID.x, r1.w
mad r0.x, vicp[r0.w + 0][0].x, cb0[r0.y + 256].x, r0.x
iadd r1.yw, vForkInstanceID.xxxx, l(0, -2, 0, -1)
movc r0.w, r1.z, r2.y, r1.y
movc r1.y, r1.z, vForkInstanceID.x, r1.w
mad r0.x, vicp[r0.w + 0][0].x, cb0[r0.y + 257].x, r0.x
mad r0.x, vicp[r1.y + 0][0].x, cb0[r0.z + 256].x, r0.x
mov o[r1.x + 15].x, -r0.x
ret 
hs_fork_phase 
dcl_hs_fork_phase_instance_count 4
dcl_input vForkInstanceID
dcl_input vicp[32][0].y
dcl_output o15.y
dcl_output o16.y
dcl_output o20.y
dcl_output o21.y
dcl_temps 3
dcl_indexrange o15.y 7
mov r0.x, vForkInstanceID.x
mov r0.y, icb[r0.x + 3].z
mov r0.z, icb[r0.x + 1].w
mov r0.x, icb[r0.x + 0].z
mul r0.w, cb0[r0.z + 259].x, vicp[r0.y + 8][0].y
mad r0.w, vicp[r0.y + 7][0].y, cb0[r0.z + 258].x, r0.w
mad r0.w, vicp[r0.y + 9][0].y, cb0[r0.z + 260].x, r0.w
mad r0.x, vicp[r0.x + 4][0].y, cb0[r0.z + 261].x, r0.w
mad r0.x, vicp[r0.y + 6][0].y, cb0[r0.z + 257].x, r0.x
iadd r0.y, vForkInstanceID.x, l(4)
udiv null, r0.y, r0.y, l(7)
iadd r1.xyzw, vForkInstanceID.xxxx, l(2, 1, 6, 3)
udiv null, r0.w, r1.z, l(7)
ult r1.z, vForkInstanceID.x, l(2)
movc r0.y, r1.z, r0.w, r0.y
and r2.xy, r1.ywyy, l(3, 3, 0, 0)
movc r0.w, r1.z, r1.x, r2.x
movc r1.x, r1.z, vForkInstanceID.x, r1.w
mad r0.x, vicp[r0.w + 0][0].y, cb0[r0.y + 256].x, r0.x
iadd r1.yw, vForkInstanceID.xxxx, l(0, -2, 0, -1)
movc r0.w, r1.z, r2.y, r1.y
movc r1.y, r1.z, vForkInstanceID.x, r1.w
mad r0.x, vicp[r0.w + 0][0].y, cb0[r0.y + 257].x, r0.x
mad r0.x, vicp[r1.y + 0][0].y, cb0[r0.z + 256].x, r0.x
mov o[r1.x + 15].y, -r0.x
ret 
hs_fork_phase 
dcl_hs_fork_phase_instance_count 4
dcl_input vForkInstanceID
dcl_input vicp[32][0].z
dcl_output o15.z
dcl_output o16.z
dcl_output o20.z
dcl_output o21.z
dcl_temps 3
dcl_indexrange o15.z 7
mov r0.x, vForkInstanceID.x
mov r0.yz, icb[r0.x + 0].yyxy
mov r0.x, icb[r0.x + 0].z
mul r0.w, cb0[r0.z + 259].x, vicp[r0.y + 8][0].z
mad r0.w, vicp[r0.y + 7][0].z, cb0[r0.z + 258].x, r0.w
mad r0.w, vicp[r0.y + 9][0].z, cb0[r0.z + 260].x, r0.w
mad r0.x, vicp[r0.x + 4][0].z, cb0[r0.z + 261].x, r0.w
mad r0.x, vicp[r0.y + 6][0].z, cb0[r0.z + 257].x, r0.x
iadd r0.y, vForkInstanceID.x, l(4)
udiv null, r0.y, r0.y, l(7)
iadd r1.xyzw, vForkInstanceID.xxxx, l(2, 1, 6, 3)
udiv null, r0.w, r1.z, l(7)
ult r1.z, vForkInstanceID.x, l(2)
movc r0.y, r1.z, r0.w, r0.y
and r2.xy, r1.ywyy, l(3, 3, 0, 0)
movc r0.w, r1.z, r1.x, r2.x
movc r1.x, r1.z, vForkInstanceID.x, r1.w
mad r0.x, vicp[r0.w + 0][0].z, cb0[r0.y + 256].x, r0.x
iadd r1.yw, vForkInstanceID.xxxx, l(0, -2, 0, -1)
movc r0.w, r1.z, r2.y, r1.y
movc r1.y, r1.z, vForkInstanceID.x, r1.w
mad r0.x, vicp[r0.w + 0][0].z, cb0[r0.y + 257].x, r0.x
mad r0.x, vicp[r1.y + 0][0].z, cb0[r0.z + 256].x, r0.x
mov o[r1.x + 15].z, -r0.x
ret 
hs_fork_phase 
dcl_output o22.x
mov o22.x, cb0[1025].x
ret 
hs_fork_phase 
dcl_output o22.y
mov o22.y, cb0[1025].x
ret 
hs_fork_phase 
dcl_output o22.z
mov o22.z, cb0[1025].x
ret 
hs_fork_phase 
dcl_output o22.w
mov o22.w, cb0[1025].x
ret 
// Approximately 315 instruction slots used
