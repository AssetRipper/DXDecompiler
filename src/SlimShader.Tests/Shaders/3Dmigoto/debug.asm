//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Note: SHADER WILL ONLY WORK WITH THE DEBUG SDK LAYER ENABLED.
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// ubuf                              texture    uint         buf             t0      1 
// fbuf                              texture   float         buf             t1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_resource_buffer (uint,uint,uint,uint) t0
dcl_resource_buffer (float,float,float,float) t1
dcl_temps 2
dcl_thread_group 1, 1, 1
printf "simple printf test"
printf "printf embedded "quote" test"
printf "printf naive parser test", r0.x"
printf "newline escape\n test"
printf "literal newline \ttest"
printf "Escape sequence test bksp \b esc e nl \n cr \r tab \t bksl \\ sq ' dq " qm ? db bs \\\\ escaped nl \\n eol \\"
printf "C++ comment // character and "quote" // to fool the parser"
mov r0.x, l(0)
ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r0.xxxx, t0.xyzw
printf "printf integer test: %d", r0.x
printf "printf literal float test: %f", l(3.141590)
mov r0.x, l(0)
ld_indexable(buffer)(float,float,float,float) r0.x, r0.xxxx, t1.xyzw
printf "printf 1 value test: %f", r0.x
mov r0.x, l(0)
ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r0.xxxx, t0.xyzw
mov r0.y, l(1)
ld_indexable(buffer)(uint,uint,uint,uint) r0.y, r0.yyyy, t0.yxzw
printf "printf 2 values test: %d %d", r0.x, r0.y
mov r0.x, l(0)
ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r0.xxxx, t0.xyzw
mov r0.y, l(1)
ld_indexable(buffer)(uint,uint,uint,uint) r0.y, r0.yyyy, t0.yxzw
mov r0.z, l(2)
ld_indexable(buffer)(uint,uint,uint,uint) r0.z, r0.zzzz, t0.yzxw
printf "printf 3 values test: %d %d %d", r0.x, r0.y, r0.z
mov r0.x, l(0)
ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r0.xxxx, t0.xyzw
mov r0.y, l(1)
ld_indexable(buffer)(uint,uint,uint,uint) r0.y, r0.yyyy, t0.yxzw
mov r0.z, l(2)
ld_indexable(buffer)(uint,uint,uint,uint) r0.z, r0.zzzz, t0.yzxw
mov r0.w, l(3)
ld_indexable(buffer)(uint,uint,uint,uint) r0.w, r0.wwww, t0.yzwx
printf "printf 4 values test: %d %d %d", r0.x, r0.y, r0.z, r0.w
mov r0.x, l(0)
ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r0.xxxx, t0.xyzw
mov r0.y, l(1)
ld_indexable(buffer)(uint,uint,uint,uint) r0.y, r0.yyyy, t0.yxzw
mov r0.z, l(2)
ld_indexable(buffer)(uint,uint,uint,uint) r0.z, r0.zzzz, t0.yzxw
mov r0.w, l(3)
ld_indexable(buffer)(uint,uint,uint,uint) r0.w, r0.wwww, t0.yzwx
mov r1.x, l(4)
ld_indexable(buffer)(uint,uint,uint,uint) r1.x, r1.xxxx, t0.xyzw
printf "printf 5 values test: %d %i %x %d", r0.x, r0.y, r0.z, r0.w, r1.x
mov r0.x, l(0)
ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r0.xxxx, t0.xyzw
mov r0.y, l(1)
ld_indexable(buffer)(uint,uint,uint,uint) r0.y, r0.yyyy, t0.yxzw
mov r0.z, l(2)
ld_indexable(buffer)(uint,uint,uint,uint) r0.z, r0.zzzz, t0.yzxw
mov r0.w, l(3)
ld_indexable(buffer)(uint,uint,uint,uint) r0.w, r0.wwww, t0.yzwx
mov r1.x, l(4)
ld_indexable(buffer)(uint,uint,uint,uint) r1.x, r1.xxxx, t0.xyzw
mov r1.y, l(5)
ld_indexable(buffer)(uint,uint,uint,uint) r1.y, r1.yyyy, t0.yxzw
printf "printf 6 values test: %d %d %i %x %d", r0.x, r0.y, r0.z, r0.w, r1.x, r1.y
mov r0.x, l(1)
ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r0.xxxx, t0.xyzw
mov r0.y, l(4)
ult r0.x, r0.y, r0.x
if_nz r0.x
  abort 
endif 
mov r0.x, l(2)
ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r0.xxxx, t0.xyzw
mov r0.y, l(4)
ult r0.x, r0.y, r0.x
if_nz r0.x
  errorf "simple errorf test"
endif 
mov r0.x, l(3)
ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r0.xxxx, t0.xyzw
mov r0.y, l(4)
ult r0.x, r0.y, r0.x
if_nz r0.x
  mov r0.x, l(3)
  ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r0.xxxx, t0.xyzw
  errorf "errorf integer test: %d", r0.x
endif 
ret 
// Approximately 82 instruction slots used
