//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbPerObject
// {
//
//   float4x4 g_mWorldViewProjection;   // Offset:    0 Size:    64
//   float4x4 g_mWorld;                 // Offset:   64 Size:    64
//   float4 g_vObjectColor;             // Offset:  128 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cbPerObject                       cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// NORMAL                   0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             0         7  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2
    dp4 oPos.z, v0, c3
    dp3 oT0.x, v1, c5
    dp3 oT0.y, v1, c6
    dp3 oT0.z, v1, c7
    dp4 r0.x, v0, c1
    dp4 r0.y, v0, c2
    dp4 r0.z, v0, c4
    mul r1.xy, r0.z, c0
    mov oPos.w, r0.z
    add oPos.xy, r0, r1
    mov oT1.xy, v2

// approximately 11 instruction slots used
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             0         4  ( FLT, FLT, FLT, FLT)
//
//
// XNA Prepass shader bytecode:
//
    vs_2_0
    dcl_texcoord v0
    dp4 r1.x, r0, c0
    dp4 r1.y, r0, c1
    dp4 r1.z, r0, c2
    dp4 r1.w, r0, c3
    mov oPos, r1

// approximately 5 instruction slots used
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             0         7  ( FLT, FLT, FLT, FLT)
//
//
// XNA shader bytecode:
//
    vs_2_0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2
    dp3 r3.x, r1, c4
    dp3 r3.y, r1, c5
    dp3 r3.z, r1, c6
    mov oT0.xyz, r3
    mov oT1.xy, r2
    dp4 r1.x, r0, c0
    dp4 r1.y, r0, c1
    dp4 r1.z, r0, c2
    dp4 r1.w, r0, c3
    mov oPos, r1

// approximately 10 instruction slots used
vs_4_0
dcl_constantbuffer CB0[7], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_output o0.xyz
dcl_output o1.xy
dcl_output_siv o2.xyzw, position
dp3 o0.x, v1.xyzx, cb0[4].xyzx
dp3 o0.y, v1.xyzx, cb0[5].xyzx
dp3 o0.z, v1.xyzx, cb0[6].xyzx
mov o1.xy, v2.xyxx
dp4 o2.x, v0.xyzw, cb0[0].xyzw
dp4 o2.y, v0.xyzw, cb0[1].xyzw
dp4 o2.z, v0.xyzw, cb0[2].xyzw
dp4 o2.w, v0.xyzw, cb0[3].xyzw
ret 
// Approximately 9 instruction slots used
