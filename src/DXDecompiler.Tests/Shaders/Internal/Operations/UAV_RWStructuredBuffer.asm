//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Note: shader requires additional functionality:
//       Tiled resources
//
//
// Buffer Definitions: 
//
// Resource bind info for uav1
// {
//
//   struct foo
//   {
//       
//       float4 sValue1;                // Offset:    0
//       float4 sValue2;                // Offset:   16
//
//   } $Element;                        // Offset:    0 Size:    32
//
// }
//
// Resource bind info for uav2
// {
//
//   struct foo
//   {
//       
//       float4 sValue1;                // Offset:    0
//       float4 sValue2;                // Offset:   16
//
//   } $Element;                        // Offset:    0 Size:    32
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// uav1                                  UAV  struct     r/w+cnt             u1      1 
// uav2                                  UAV  struct     r/w+cnt             u2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   x           0     NONE     int   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_uav_structured_opc u1, 32
dcl_uav_structured_opc u2, 32
dcl_input_ps constant v0.x
dcl_output o0.xyzw
dcl_temps 4
itof r0.xyzw, l(0, 0, 0, 0)
mov r1.x, v0.x
mov r1.y, v0.x
bufinfo_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r1.z, u1.yzxw
mov r1.z, r1.z
mov r1.w, l(32)
utof r2.xyzw, r1.zzzz
add r0.xyzw, r0.xyzw, r2.xyzw
utof r2.xyzw, r1.wwww
add r0.xyzw, r0.xyzw, r2.xyzw
ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r2.xyzw, r1.x, l(0), u1.xyzw
ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r3.xyzw, r1.x, l(16), u1.xyzw
mov r2.xyzw, r2.xyzw
mov r3.xyzw, r3.xyzw
add r0.xyzw, r0.xyzw, r2.xyzw
add r0.xyzw, r3.xyzw, r0.xyzw
ld_structured_s_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r2.xyzw, r3.x, r1.x, l(0), u1.xyzw
check_access_fully_mapped r1.z, r3.x
ld_structured_s_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r3.xyzw, r1.x, r1.x, l(16), u1.xyzw
check_access_fully_mapped r1.x, r1.x
and r1.x, r1.z, r1.x
mov r2.xyzw, r2.xyzw
mov r3.xyzw, r3.xyzw
add r0.xyzw, r0.xyzw, r2.xyzw
add r0.xyzw, r3.xyzw, r0.xyzw
and r2.xyzw, r1.xxxx, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
add r0.xyzw, r0.xyzw, r2.xyzw
ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r2.x, r1.y, l(0), u1.xxxx
ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r2.y, r1.y, l(4), u1.xxxx
ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r2.z, r1.y, l(8), u1.xxxx
ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r2.w, r1.y, l(12), u1.xxxx
ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r3.x, r1.y, l(16), u1.xxxx
ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r3.y, r1.y, l(20), u1.xxxx
ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r3.z, r1.y, l(24), u1.xxxx
ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r3.w, r1.y, l(28), u1.xxxx
add r0.xyzw, r0.xyzw, r2.xyzw
add r0.xyzw, r3.xyzw, r0.xyzw
imm_atomic_alloc r1.x, u1
utof r1.xyzw, r1.xxxx
add r0.xyzw, r0.xyzw, r1.xyzw
imm_atomic_alloc r1.x, u1
utof r1.xyzw, r1.xxxx
add r0.xyzw, r0.xyzw, r1.xyzw
imm_atomic_consume r1.x, u2
utof r1.xyzw, r1.xxxx
add r0.xyzw, r0.xyzw, r1.xyzw
imm_atomic_consume r1.x, u2
utof r1.xyzw, r1.xxxx
add r0.xyzw, r0.xyzw, r1.xyzw
mov o0.xyzw, r0.xyzw
ret 
// Approximately 51 instruction slots used
