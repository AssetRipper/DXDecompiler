//
// FX Version: fx_5_0
//
// 5 local buffer(s)
//
cbuffer $Globals
{
    float4  gFloat1;                    // Offset:    0, size:   16
    float4  gFloat2;                    // Offset:   16, size:   16
    float4  gFloatArr1[4] = { -1, 1, 0, 2, 1, 1, 0, 3, -1, -1, 0, 4, 1, -1, 0, 5 };// Offset:   32, size:   64
    int4    gInt1;                      // Offset:   96, size:   16
    int4    gInt2;                      // Offset:  112, size:   16
    bool    gBool1;                     // Offset:  128, size:    4
    bool    gBool2;                     // Offset:  132, size:    4
    float4x4 gMatrix1;                  // Offset:  144, size:   64
    cClass1 gAbstractInterface2;        // Offset:  208, size:   32
    cClass2 gAbstractInterface3;        // Offset:  240, size:   32
    float   g_fTessellationFactor;      // Offset:  272, size:    4
}

cbuffer cbPerObject
{
    float4x4 g_mWorldViewProjection : packoffset(c0.x);// Offset:    0, size:   64
    float4x4 g_mWorld : packoffset(c4.x);// Offset:   64, size:   64
    float4  g_vObjectColor : packoffset(c8.x);// Offset:  128, size:   16
}

cbuffer cbPerFrame
{
    float3  g_vLightDir : packoffset(c0.x);// Offset:    0, size:   12
    float   g_fAmbient : packoffset(c0.w);// Offset:   12, size:    4
}

cbuffer cbuffer2
{
    bar     structVal1[2];              // Offset:    0, size: 1396
    float   dummy;                      // Offset: 1396, size:    4
    bar     structVal2;                 // Offset: 1408, size:  692
    <unnamed> anonStruct1;              // Offset: 2112, size:    8
    <unnamed> anonStruct2;              // Offset: 2128, size:   16
}

tbuffer TestTBuffer
{
    float4  g_TBval1;                   // Offset:    0, size:   16
    float3  g_TBpositions[4] = { -1, 1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0 };// Offset:   16, size:   60
    float2  g_TBtexcoords[4] = { 0, 1, 1, 1, 0, 0, 1, 0 };// Offset:   80, size:   56
    bar     structVal3;                 // Offset:  144, size:  692
}

//
// 14 local object(s)
//
Texture2D g_txDiffuse;
SamplerState g_samLinear
{
};
StructuredBuffer CSBuffer0;
StructuredBuffer CSBuffer1;
RWStructuredBuffer CSBuffer2;
ByteAddressBuffer CSBuffer3;
ByteAddressBuffer CSBuffer4;
RWByteAddressBuffer CSBuffer5;
VertexShader TestVertexShader5 = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 10.1
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer $Globals
        // {
        //
        //   float4 gFloat1;                    // Offset:    0 Size:    16
        //   float4 gFloat2;                    // Offset:   16 Size:    16
        //   float4 gFloatArr1[4];              // Offset:   32 Size:    64
        //      = 0xbf800000 0x3f800000 0x00000000 0x40000000 
        //        0x3f800000 0x3f800000 0x00000000 0x40400000 
        //        0xbf800000 0xbf800000 0x00000000 0x40800000 
        //        0x3f800000 0xbf800000 0x00000000 0x40a00000 
        //   int4 gInt1;                        // Offset:   96 Size:    16
        //   int4 gInt2;                        // Offset:  112 Size:    16
        //   bool gBool1;                       // Offset:  128 Size:     4
        //   bool gBool2;                       // Offset:  132 Size:     4
        //   float4x4 gMatrix1;                 // Offset:  144 Size:    64 [unused]
        //   
        //   struct cClass1
        //   {
        //       
        //       float4 foo;                    // Offset:  208
        //       float4 bar;                    // Offset:  224
        //
        //   } gAbstractInterface2;             // Offset:  208 Size:    32
        //   
        //   struct cClass2
        //   {
        //       
        //       float4 foo;                    // Offset:  240
        //       float4 bar;                    // Offset:  256
        //
        //   } gAbstractInterface3;             // Offset:  240 Size:    32
        //   float g_fTessellationFactor;       // Offset:  272 Size:     4 [unused]
        //
        // }
        //
        // interfaces $ThisPointer
        // {
        //
        //   interface iInterface1 gAbstractInterface1;// Offset:    0 Size:     1
        //
        // }
        //
        // cbuffer cbPerObject
        // {
        //
        //   float4x4 g_mWorldViewProjection;   // Offset:    0 Size:    64
        //   float4x4 g_mWorld;                 // Offset:   64 Size:    64
        //   float4 g_vObjectColor;             // Offset:  128 Size:    16 [unused]
        //
        // }
        //
        // cbuffer cbuffer2
        // {
        //
        //   struct bar
        //   {
        //       
        //       float foofoo;                  // Offset:    0
        //       float4x4 mat;                  // Offset:   16
        //       uint foobar;                   // Offset:   80
        //       
        //       struct bar::<unnamed>
        //       {
        //           
        //           float foo;                 // Offset:   96
        //           float bar;                 // Offset:  100
        //
        //       } inner_struct_1;              // Offset:   96
        //       
        //       struct bar::<unnamed>
        //       {
        //           
        //           float baz;                 // Offset:  112
        //           float bug;                 // Offset:  116
        //           
        //           struct InnerStructTest
        //           {
        //               
        //               float foo;             // Offset:  128
        //               uint bar;              // Offset:  132
        //               float baz;             // Offset:  136
        //               int buz;               // Offset:  140
        //               float4 f4;             // Offset:  144
        //               float4 g4;             // Offset:  160
        //               float oopsie;          // Offset:  176
        //               float4 m4;             // Offset:  192
        //
        //           } inner_struct_3;          // Offset:  128
        //
        //       } inner_struct_2[2];           // Offset:  112
        //       float foobaz;                  // Offset:  304
        //       int foobuz[8];                 // Offset:  320
        //       float binary_decompiler_array_size_calculation_looks_sketchy;// Offset:  436
        //       int2 really[3];                // Offset:  448
        //       float sketchy;                 // Offset:  488
        //       float3 did[5];                 // Offset:  496
        //       float i;                       // Offset:  572
        //       float4 mention[7];             // Offset:  576
        //       float how_sketchy;             // Offset:  688
        //
        //   } structVal1[2];                   // Offset:    0 Size:  1396
        //   float dummy;                       // Offset: 1396 Size:     4 [unused]
        //   
        //   struct bar
        //   {
        //       
        //       float foofoo;                  // Offset: 1408
        //       float4x4 mat;                  // Offset: 1424
        //       uint foobar;                   // Offset: 1488
        //       
        //       struct bar::<unnamed>
        //       {
        //           
        //           float foo;                 // Offset: 1504
        //           float bar;                 // Offset: 1508
        //
        //       } inner_struct_1;              // Offset: 1504
        //       
        //       struct bar::<unnamed>
        //       {
        //           
        //           float baz;                 // Offset: 1520
        //           float bug;                 // Offset: 1524
        //           
        //           struct InnerStructTest
        //           {
        //               
        //               float foo;             // Offset: 1536
        //               uint bar;              // Offset: 1540
        //               float baz;             // Offset: 1544
        //               int buz;               // Offset: 1548
        //               float4 f4;             // Offset: 1552
        //               float4 g4;             // Offset: 1568
        //               float oopsie;          // Offset: 1584
        //               float4 m4;             // Offset: 1600
        //
        //           } inner_struct_3;          // Offset: 1536
        //
        //       } inner_struct_2[2];           // Offset: 1520
        //       float foobaz;                  // Offset: 1712
        //       int foobuz[8];                 // Offset: 1728
        //       float binary_decompiler_array_size_calculation_looks_sketchy;// Offset: 1844
        //       int2 really[3];                // Offset: 1856
        //       float sketchy;                 // Offset: 1896
        //       float3 did[5];                 // Offset: 1904
        //       float i;                       // Offset: 1980
        //       float4 mention[7];             // Offset: 1984
        //       float how_sketchy;             // Offset: 2096
        //
        //   } structVal2;                      // Offset: 1408 Size:   692
        //   
        //   struct <unnamed>
        //   {
        //       
        //       float val1;                    // Offset: 2112
        //       float val2;                    // Offset: 2116
        //
        //   } anonStruct1;                     // Offset: 2112 Size:     8 [unused]
        //   
        //   struct <unnamed>
        //   {
        //       
        //       float2 val1;                   // Offset: 2128
        //       float2 val2;                   // Offset: 2136
        //
        //   } anonStruct2;                     // Offset: 2128 Size:    16 [unused]
        //
        // }
        //
        // tbuffer TestTBuffer
        // {
        //
        //   float4 g_TBval1;                   // Offset:    0 Size:    16
        //   float3 g_TBpositions[4];           // Offset:   16 Size:    60
        //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
        //        0x3f800000 0x3f800000 0x00000000 0x00000000 
        //        0xbf800000 0xbf800000 0x00000000 0x00000000 
        //        0x3f800000 0xbf800000 0x00000000 
        //   float2 g_TBtexcoords[4];           // Offset:   80 Size:    56
        //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
        //        0x3f800000 0x3f800000 0x00000000 0x00000000 
        //        0x00000000 0x00000000 0x00000000 0x00000000 
        //        0x3f800000 0x00000000 
        //   
        //   struct bar
        //   {
        //       
        //       float foofoo;                  // Offset:  144
        //       float4x4 mat;                  // Offset:  160
        //       uint foobar;                   // Offset:  224
        //       
        //       struct bar::<unnamed>
        //       {
        //           
        //           float foo;                 // Offset:  240
        //           float bar;                 // Offset:  244
        //
        //       } inner_struct_1;              // Offset:  240
        //       
        //       struct bar::<unnamed>
        //       {
        //           
        //           float baz;                 // Offset:  256
        //           float bug;                 // Offset:  260
        //           
        //           struct InnerStructTest
        //           {
        //               
        //               float foo;             // Offset:  272
        //               uint bar;              // Offset:  276
        //               float baz;             // Offset:  280
        //               int buz;               // Offset:  284
        //               float4 f4;             // Offset:  288
        //               float4 g4;             // Offset:  304
        //               float oopsie;          // Offset:  320
        //               float4 m4;             // Offset:  336
        //
        //           } inner_struct_3;          // Offset:  272
        //
        //       } inner_struct_2[2];           // Offset:  256
        //       float foobaz;                  // Offset:  448
        //       int foobuz[8];                 // Offset:  464
        //       float binary_decompiler_array_size_calculation_looks_sketchy;// Offset:  580
        //       int2 really[3];                // Offset:  592
        //       float sketchy;                 // Offset:  632
        //       float3 did[5];                 // Offset:  640
        //       float i;                       // Offset:  716
        //       float4 mention[7];             // Offset:  720
        //       float how_sketchy;             // Offset:  832
        //
        //   } structVal3;                      // Offset:  144 Size:   692
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim      HLSL Bind  Count
        // ------------------------------ ---------- ------- ----------- -------------- ------
        // TestTBuffer                       tbuffer      NA          NA             t0      1 
        // $Globals                          cbuffer      NA          NA            cb0      1 
        // cbPerObject                       cbuffer      NA          NA            cb1      1 
        // cbuffer2                          cbuffer      NA          NA            cb2      1 
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyzw        0     NONE   float   xyzw
        // NORMAL                   0   xyz         1     NONE   float   xyz 
        // TEXCOORD                 0   xy          2     NONE   float   xy  
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // NORMAL                   0   xyz         0     NONE   float   xyz 
        // TEXCOORD                 0   xy          1     NONE   float   xy  
        // SV_POSITION              0   xyzw        2      POS   float   xyzw
        // CUSTOM                   0   xyzw        3     NONE   float   xyzw
        //
        //
        // Available Class Types:
        //
        // Name                             ID CB Stride Texture Sampler
        // ------------------------------ ---- --------- ------- -------
        // cClass2                           0         2       0       0
        // cClass1                           1         2       0       0
        //
        // Available Class Instances:
        //
        // Name                        Type CB CB Offset Texture Sampler
        // --------------------------- ---- -- --------- ------- -------
        // gAbstractInterface2            1  0        13       -       -
        // gAbstractInterface3            0  0        15       -       -
        //
        // Interface slots, 1 total:
        //
        //             Slots
        // +----------+---------+---------------------------------------
        // | Type ID  |   0     |0    1    
        // | Table ID |         |0    1    
        // +----------+---------+---------------------------------------
        vs_5_0
        dcl_globalFlags refactoringAllowed
        dcl_constantbuffer CB0[17], dynamicIndexed
        dcl_constantbuffer CB1[7], immediateIndexed
        dcl_constantbuffer CB2[96], dynamicIndexed
        dcl_resource_buffer (mixed,mixed,mixed,mixed) t0
        dcl_function_body fb0
        dcl_function_body fb1
        dcl_function_body fb2
        dcl_function_body fb3
        dcl_function_body fb4
        dcl_function_body fb5
        dcl_function_table ft0 = {fb0, fb2, fb4}
        dcl_function_table ft1 = {fb1, fb3, fb5}
        dcl_interface fp0[1][3] = {ft0, ft1}
        dcl_input v0.xyzw
        dcl_input v1.xyz
        dcl_input v2.xy
        dcl_output o0.xyz
        dcl_output o1.xy
        dcl_output_siv o2.xyzw, position
        dcl_output o3.xyzw
        dcl_temps 8
        ld_indexable(buffer)(mixed,mixed,mixed,mixed) r0.xyzw, l(0, 0, 0, 0), t0.xyzw
        ld_indexable(buffer)(mixed,mixed,mixed,mixed) r1.xyz, l(1, 1, 1, 1), t0.xyzw
        ld_indexable(buffer)(mixed,mixed,mixed,mixed) r2.xyz, l(2, 2, 2, 2), t0.xyzw
        ld_indexable(buffer)(mixed,mixed,mixed,mixed) r3.xyz, l(3, 3, 3, 3), t0.xyzw
        ld_indexable(buffer)(mixed,mixed,mixed,mixed) r4.xy, l(8, 8, 8, 8), t0.xyzw
        ld_indexable(buffer)(mixed,mixed,mixed,mixed) r1.w, l(34, 34, 34, 34), t0.yzwx
        dp4 o2.x, v0.xyzw, cb1[0].xyzw
        dp4 o2.y, v0.xyzw, cb1[1].xyzw
        dp4 o2.z, v0.xyzw, cb1[2].xyzw
        dp4 o2.w, v0.xyzw, cb1[3].xyzw
        dp3 o0.x, v1.xyzx, cb1[4].xyzx
        dp3 o0.y, v1.xyzx, cb1[5].xyzx
        dp3 o0.z, v1.xyzx, cb1[6].xyzx
        add r5.xyzw, cb0[0].xyzw, cb0[1].xyzw
        add r6.xyzw, cb0[0].xyzw, -cb0[1].xyzw
        add r5.xyzw, r5.xyzw, r6.xyzw
        mad r5.xyzw, cb0[0].xyzw, cb0[1].xyzw, r5.xyzw
        div r6.xyzw, cb0[0].xyzw, cb0[1].xyzw
        add r5.xyzw, r5.xyzw, r6.xyzw
        sincos r6.xyzw, null, cb0[0].xyzw
        add r5.xyzw, r5.xyzw, r6.xyzw
        sincos r6.xyzw, r7.xyzw, cb0[1].xyzw
        add r5.xyzw, r5.xyzw, r7.xyzw
        div r7.xyzw, r6.xyzw, r7.xyzw
        add r5.xyzw, r5.xyzw, r7.xyzw
        dp4 r2.w, cb0[0].xyzw, cb0[1].xyzw
        add r5.xyzw, r2.wwww, r5.xyzw
        dp4 r2.w, cb0[0].xyzw, cb0[0].xyzw
        sqrt r2.w, r2.w
        add r5.xyzw, r2.wwww, r5.xyzw
        log r7.xyzw, cb0[0].xyzw
        mad r5.xyzw, r7.xyzw, l(0.693147, 0.693147, 0.693147, 0.693147), r5.xyzw
        log r7.xyzw, cb0[1].xyzw
        mad r5.xyzw, r7.xyzw, l(0.301030, 0.301030, 0.301030, 0.301030), r5.xyzw
        max r7.xyzw, cb0[0].xyzw, cb0[1].xyzw
        add r5.xyzw, r5.xyzw, r7.xyzw
        dp4 r2.w, cb0[1].xyzw, cb0[1].xyzw
        rsq r2.w, r2.w
        mad r5.xyzw, cb0[1].xyzw, r2.wwww, r5.xyzw
        mad r5.xyzw, cb0[1].xyzw, l(0.017453, 0.017453, 0.017453, 0.017453), r5.xyzw
        round_z r7.xyzw, cb0[0].xyzw
        add r5.xyzw, r5.xyzw, r7.xyzw
        utof r2.w, cb2[49].x
        add r2.w, r2.w, cb2[44].x
        add r2.w, r2.w, cb2[50].x
        add r2.w, r2.w, cb2[50].y
        dp4 r7.x, cb0[0].xyzw, cb2[45].xyzw
        dp4 r7.y, cb0[0].xyzw, cb2[46].xyzw
        dp4 r7.z, cb0[0].xyzw, cb2[47].xyzw
        dp4 r7.w, cb0[0].xyzw, cb2[48].xyzw
        add r7.xyzw, r2.wwww, r7.xyzw
        utof r2.w, cb2[58].y
        add r7.xyzw, r2.wwww, r7.xyzw
        add r7.xyzw, r7.xyzw, cb2[58].zzzz
        add r7.xyzw, r7.xyzw, cb2[59].xyzw
        add r7.xyzw, r7.xyzw, cb2[61].xxxx
        add r7.xyzw, r7.xyzw, cb2[95].yyyy
        add r0.xyzw, r0.xyzw, r7.xyzw
        add r1.xyz, r1.xyzx, r0.xyzx
        add r1.xyz, r2.xyzx, r1.xyzx
        add r0.xyz, r3.xyzx, r1.xyzx
        mov r4.zw, l(0,0,0,0)
        add r0.xyzw, r0.xyzw, r4.xyzw
        itof r1.x, r1.w
        add r0.xyzw, r0.xyzw, r1.xxxx
        add r0.xyzw, r0.xyzw, r5.xyzw
        imul null, r1.x, l(44), cb0[6].x
        iadd r1.y, l(1), cb0[7].x
        ld_indexable(buffer)(mixed,mixed,mixed,mixed) r2.xyz, r1.yyyy, t0.xyzw
        mov r2.w, l(0)
        add r1.xyzw, r2.xyzw, cb2[r1.x + 0].xxxx
        mov r2.x, cb0[6].y
        add r1.xyzw, r1.xyzw, cb0[r2.x + 2].xyzw
        add r0.xyzw, r0.xyzw, r1.xyzw
        fcall fp0[0][0]
        fcall fp0[0][1]
        add r1.xyzw, r1.xyzw, r2.xyzw
        fcall fp0[0][2]
        add r1.xyzw, r1.xyzw, r2.xyzw
        add r2.xyzw, r6.xyzw, cb0[13].xyzw
        add r1.xyzw, r1.xyzw, r2.xyzw
        mad r1.xyzw, cb0[1].xyzw, l(55.000000, 55.000000, 55.000000, 55.000000), r1.xyzw
        sqrt r2.xyzw, cb0[15].xyzw
        add r2.xyzw, r2.xyzw, cb0[1].xyzw
        add r2.xyzw, r2.xyzw, cb0[0].xyzw
        add r1.xyzw, r1.xyzw, r2.xyzw
        log r2.xyzw, cb0[16].xyzw
        mad r2.xyzw, r2.xyzw, l(0.693147, 0.693147, 0.693147, 0.693147), cb0[1].xyzw
        add r1.xyzw, r1.xyzw, r2.xyzw
        add r0.xyzw, r0.xyzw, r1.xyzw
        mov r1.xyzw, l(0,0,0,0)
        mov r2.x, l(0)
        loop 
          ige r2.y, r2.x, cb0[6].x
          breakc_nz r2.y
          add r1.xyzw, r1.xyzw, cb0[0].xyzw
          iadd r2.x, r2.x, l(1)
        endloop 
        switch cb0[6].x
          case l(1)
          add r2.xyzw, r1.xyzw, cb0[0].xyzw
          break 
          case l(2)
          add r2.xyzw, r1.xyzw, cb0[1].xyzw
          break 
          case l(3)
          movc r3.x, cb0[8].x, l(1.000000), l(0)
          add r2.xyzw, r1.xyzw, r3.xxxx
          break 
          default 
          movc r3.x, cb0[8].y, l(1.000000), l(0)
          add r2.xyzw, r1.xyzw, r3.xxxx
          break 
        endswitch 
        mov r1.xyzw, r2.xyzw
        loop 
          lt r3.x, cb0[0].x, r1.x
          if_nz r3.x
            break 
          endif 
          add r1.xyzw, r1.xyzw, cb0[0].xyzw
        endloop 
        ilt r2.x, cb0[7].z, cb0[6].y
        add r3.xyzw, r1.xyzw, cb0[0].xyzw
        add r1.xyzw, r1.xyzw, cb0[1].xyzw
        movc r1.xyzw, r2.xxxx, r3.xyzw, r1.xyzw
        add r1.xyzw, r1.xyzw, cb0[1].xyzw
        ine r2.xy, l(0, 0, 0, 0), cb0[8].xyxx
        ieq r2.x, r2.y, r2.x
        mov r3.xyzw, r1.xyzw
        loop 
          ge r2.y, cb0[0].y, r3.y
          breakc_nz r2.y
          add r4.xyzw, r3.xyzw, cb0[1].xyzw
          if_nz r2.x
            mov r3.xyzw, r4.xyzw
            continue 
          endif 
          mov r3.xyzw, r4.xyzw
        endloop 
        add o3.xyzw, r0.xyzw, r3.xyzw
        mov o1.xy, v2.xyxx
        ret 
        label fb0
        mov r2.xy, this[0].yxyy
        sqrt r2.xyzw, cb[r2.y + 0][r2.x + 0].xyzw
        add r2.xyzw, r2.xyzw, cb0[1].xyzw
        add r1.xyzw, r2.xyzw, cb0[0].xyzw
        ret 
        label fb1
        mov r2.xy, this[0].yxyy
        add r1.xyzw, r6.xyzw, cb[r2.y + 0][r2.x + 0].xyzw
        ret 
        label fb2
        mov r3.xy, this[0].yxyy
        log r3.xyzw, cb[r3.y + 0][r3.x + 1].xyzw
        mad r2.xyzw, r3.xyzw, l(0.693147, 0.693147, 0.693147, 0.693147), cb0[1].xyzw
        ret 
        label fb3
        mul r2.xyzw, l(55.000000, 55.000000, 55.000000, 55.000000), cb0[1].xyzw
        ret 
        label fb4
        mov r3.xy, this[0].yxyy
        sqrt r3.xyzw, cb[r3.y + 0][r3.x + 0].xyzw
        add r3.xyzw, r3.xyzw, cb0[1].xyzw
        add r2.xyzw, r3.xyzw, cb0[0].xyzw
        ret 
        label fb5
        mov r3.xy, this[0].yxyy
        add r2.xyzw, r6.xyzw, cb[r3.y + 0][r3.x + 0].xyzw
        ret 
        // Approximately 165 instruction slots used
            
    };
PixelShader TestPixelShader5 = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 10.1
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer cbPerFrame
        // {
        //
        //   float3 g_vLightDir;                // Offset:    0 Size:    12
        //   float g_fAmbient;                  // Offset:   12 Size:     4
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim      HLSL Bind  Count
        // ------------------------------ ---------- ------- ----------- -------------- ------
        // g_samLinear                       sampler      NA          NA             s0      1 
        // g_txDiffuse                       texture  float4          2d             t0      1 
        // cbPerFrame                        cbuffer      NA          NA            cb0      1 
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // NORMAL                   0   xyz         0     NONE   float   xyz 
        // TEXCOORD                 0   xy          1     NONE   float   xy  
        // SV_POSITION              0   xyzw        2      POS   float       
        // CUSTOM                   0   xyzw        3     NONE   float       
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
        //
        ps_5_0
        dcl_globalFlags refactoringAllowed
        dcl_constantbuffer CB0[1], immediateIndexed
        dcl_sampler s0, mode_default
        dcl_resource_texture2d (float,float,float,float) t0
        dcl_input_ps linear v0.xyz
        dcl_input_ps linear v1.xy
        dcl_output o0.xyzw
        dcl_temps 2
        dp3_sat r0.x, cb0[0].xyzx, v0.xyzx
        max r0.x, r0.x, cb0[0].w
        sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0
        mul o0.xyzw, r0.xxxx, r1.xyzw
        ret 
        // Approximately 5 instruction slots used
            
    };
ComputeShader TestComputeShader5 = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 10.1
        //
        //
        // Note: shader requires additional functionality:
        //       Double-precision floating point
        //
        //
        // Buffer Definitions: 
        //
        // Resource bind info for CSBuffer0
        // {
        //
        //   struct BufType
        //   {
        //       
        //       int i;                         // Offset:    0
        //       float f;                       // Offset:    4
        //       double d;                      // Offset:    8
        //
        //   } $Element;                        // Offset:    0 Size:    16
        //
        // }
        //
        // Resource bind info for CSBuffer1
        // {
        //
        //   struct BufType
        //   {
        //       
        //       int i;                         // Offset:    0
        //       float f;                       // Offset:    4
        //       double d;                      // Offset:    8
        //
        //   } $Element;                        // Offset:    0 Size:    16
        //
        // }
        //
        // Resource bind info for CSBuffer2
        // {
        //
        //   struct BufType
        //   {
        //       
        //       int i;                         // Offset:    0
        //       float f;                       // Offset:    4
        //       double d;                      // Offset:    8
        //
        //   } $Element;                        // Offset:    0 Size:    16
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim      HLSL Bind  Count
        // ------------------------------ ---------- ------- ----------- -------------- ------
        // CSBuffer0                         texture  struct         r/o             t0      1 
        // CSBuffer1                         texture  struct         r/o             t1      1 
        // CSBuffer3                         texture    byte         r/o             t2      1 
        // CSBuffer4                         texture    byte         r/o             t3      1 
        // CSBuffer2                             UAV  struct         r/w             u0      1 
        // CSBuffer5                             UAV    byte         r/w             u1      1 
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // no Input
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // no Output
        cs_5_0
        dcl_globalFlags refactoringAllowed | enableDoublePrecisionFloatOps
        dcl_resource_structured t0, 16
        dcl_resource_structured t1, 16
        dcl_resource_raw t2
        dcl_resource_raw t3
        dcl_uav_structured u0, 16
        dcl_uav_raw u1
        dcl_input vThreadID.x
        dcl_temps 4
        dcl_thread_group 1, 1, 1
        ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r0.xyzw, vThreadID.x, l(0), t0.zwxy
        ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.xyzw, vThreadID.x, l(0), t1.zwxy
        dadd r0.xy, r0.xyxy, r1.xyxy
        mov r2.zw, r0.xxxy
        iadd r2.x, r0.z, r1.z
        add r2.y, r0.w, r1.w
        store_structured u0.xyzw, vThreadID.x, l(0), r2.xyzw
        ishl r0.x, vThreadID.x, l(4)
        ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r1.xyzw, r0.x, t2.zwxy
        ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.xyzw, r0.x, t3.zwxy
        dadd r0.zw, r1.xyxy, r2.xyxy
        mov r3.zw, r0.zzzw
        iadd r3.x, r1.z, r2.z
        add r3.y, r1.w, r2.w
        store_raw u1.xyzw, r0.x, r3.xyzw
        ret 
        // Approximately 16 instruction slots used
            
    };
DomainShader TestDomainShader5 = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 10.1
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer cbPerObject
        // {
        //
        //   float4x4 g_mWorldViewProjection;   // Offset:    0 Size:    64
        //   float4x4 g_mWorld;                 // Offset:   64 Size:    64 [unused]
        //   float4 g_vObjectColor;             // Offset:  128 Size:    16 [unused]
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim      HLSL Bind  Count
        // ------------------------------ ---------- ------- ----------- -------------- ------
        // cbPerObject                       cbuffer      NA          NA            cb0      1 
        //
        //
        //
        // Patch Constant signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // SV_TessFactor            0   x           0 QUADEDGE   float       
        // SV_TessFactor            1   x           1 QUADEDGE   float       
        // SV_TessFactor            2   x           2 QUADEDGE   float       
        // SV_TessFactor            3   x           3 QUADEDGE   float       
        // SV_InsideTessFactor      0   x           4  QUADINT   float       
        // SV_InsideTessFactor      1   x           5  QUADINT   float       
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // BEZIERPOS                0   xyz         0     NONE   float   xyz 
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // SV_POSITION              0   xyzw        0      POS   float   xyzw
        // WORLDPOS                 0   xyz         1     NONE   float   xyz 
        // NORMAL                   0   xyz         2     NONE   float   xyz 
        //
        // Tessellation Domain   # of control points
        // -------------------- --------------------
        // Quadrilateral                          16
        //
        ds_5_0
        dcl_input_control_point_count 16
        dcl_tessellator_domain domain_quad
        dcl_globalFlags refactoringAllowed
        dcl_constantbuffer CB0[4], immediateIndexed
        dcl_input vDomain.xy
        dcl_input vicp[16][0].xyz
        dcl_output_siv o0.xyzw, position
        dcl_output o1.xyz
        dcl_output o2.xyz
        dcl_temps 10
        mul r0.xy, vDomain.xyxx, vDomain.xyxx
        mul r0.zw, vDomain.xxxy, l(0.000000, 0.000000, 3.000000, 3.000000)
        add r1.xy, -vDomain.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
        mul r2.xyzw, r1.xxyy, r1.xxyy
        mul r1.zw, r0.zzzw, r2.yyyw
        mul r0.xyzw, r0.xyzw, vDomain.xyxy
        mul r3.xyz, r1.zzzz, vicp[5][0].yzxy
        mul r4.xy, r1.xyxx, r2.ywyy
        mad r3.xyz, vicp[4][0].yzxy, r4.xxxx, r3.xyzx
        mul r4.zw, r1.xxxy, r0.zzzw
        mul r1.xy, r1.xyxx, vDomain.xyxx
        mad r3.xyz, vicp[6][0].yzxy, r4.zzzz, r3.xyzx
        mad r3.xyz, vicp[7][0].yzxy, r0.xxxx, r3.xyzx
        mul r5.xyz, r1.wwww, r3.zxyz
        mul r6.xyz, r1.zzzz, vicp[1][0].yzxy
        mad r6.xyz, vicp[0][0].yzxy, r4.xxxx, r6.xyzx
        mad r6.xyz, vicp[2][0].yzxy, r4.zzzz, r6.xyzx
        mad r6.xyz, vicp[3][0].yzxy, r0.xxxx, r6.xyzx
        mad r5.xyz, r4.yyyy, r6.zxyz, r5.xyzx
        mul r7.xyz, r1.zzzz, vicp[9][0].yzxy
        mad r7.xyz, vicp[8][0].yzxy, r4.xxxx, r7.xyzx
        mad r7.xyz, vicp[10][0].yzxy, r4.zzzz, r7.xyzx
        mad r7.xyz, vicp[11][0].yzxy, r0.xxxx, r7.xyzx
        mad r5.xyz, r4.wwww, r7.zxyz, r5.xyzx
        mul r8.xyz, r1.zzzz, vicp[13][0].yzxy
        mad r8.xyz, vicp[12][0].yzxy, r4.xxxx, r8.xyzx
        mad r8.xyz, vicp[14][0].yzxy, r4.zzzz, r8.xyzx
        mad r8.xyz, vicp[15][0].yzxy, r0.xxxx, r8.xyzx
        mad r5.xyz, r0.yyyy, r8.zxyz, r5.xyzx
        mov r5.w, l(1.000000)
        dp4 o0.x, r5.xyzw, cb0[0].xyzw
        dp4 o0.y, r5.xyzw, cb0[1].xyzw
        dp4 o0.z, r5.xyzw, cb0[2].xyzw
        dp4 o0.w, r5.xyzw, cb0[3].xyzw
        mov o1.xyz, r5.xyzx
        mul r4.xz, r1.xxyx, l(6.000000, 0.000000, 6.000000, 0.000000)
        mad r1.xy, r1.xyxx, l(6.000000, 6.000000, 0.000000, 0.000000), -r0.zwzz
        mad r2.yw, r2.yyyw, l(0.000000, 3.000000, 0.000000, 3.000000), -r4.xxxz
        mul r2.xz, r2.xxzx, l(-3.000000, 0.000000, -3.000000, 0.000000)
        mul r5.xyz, r2.yyyy, vicp[5][0].zxyz
        mad r5.xyz, vicp[4][0].zxyz, r2.xxxx, r5.xyzx
        mad r5.xyz, vicp[6][0].zxyz, r1.xxxx, r5.xyzx
        mad r5.xyz, vicp[7][0].zxyz, r0.zzzz, r5.xyzx
        mul r5.xyz, r1.wwww, r5.xyzx
        mul r9.xyz, r2.yyyy, vicp[1][0].zxyz
        mad r9.xyz, vicp[0][0].zxyz, r2.xxxx, r9.xyzx
        mad r9.xyz, vicp[2][0].zxyz, r1.xxxx, r9.xyzx
        mad r9.xyz, vicp[3][0].zxyz, r0.zzzz, r9.xyzx
        mad r4.xyz, r4.yyyy, r9.xyzx, r5.xyzx
        mul r5.xyz, r2.yyyy, vicp[9][0].zxyz
        mad r5.xyz, vicp[8][0].zxyz, r2.xxxx, r5.xyzx
        mad r5.xyz, vicp[10][0].zxyz, r1.xxxx, r5.xyzx
        mad r5.xyz, vicp[11][0].zxyz, r0.zzzz, r5.xyzx
        mad r4.xyz, r4.wwww, r5.xyzx, r4.xyzx
        mul r5.xyz, r2.yyyy, vicp[13][0].zxyz
        mul r3.xyz, r3.xyzx, r2.wwww
        mad r2.yzw, r2.zzzz, r6.xxyz, r3.xxyz
        mad r3.xyz, vicp[12][0].zxyz, r2.xxxx, r5.xyzx
        mad r1.xzw, vicp[14][0].zzxy, r1.xxxx, r3.xxyz
        mad r2.xyz, r1.yyyy, r7.xyzx, r2.yzwy
        mad r2.xyz, r0.wwww, r8.xyzx, r2.xyzx
        mad r0.xzw, vicp[15][0].zzxy, r0.zzzz, r1.xxzw
        mad r0.xyz, r0.yyyy, r0.xzwx, r4.xyzx
        mul r1.xyz, r2.xyzx, r0.xyzx
        mad r0.xyz, r0.zxyz, r2.yzxy, -r1.xyzx
        dp3 r0.w, r0.xyzx, r0.xyzx
        rsq r0.w, r0.w
        mul o2.xyz, r0.wwww, r0.xyzx
        ret 
        // Approximately 69 instruction slots used
            
    };
HullShader TestHullShader5 = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 10.1
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer $Globals
        // {
        //
        //   float4 gFloat1;                    // Offset:    0 Size:    16 [unused]
        //   float4 gFloat2;                    // Offset:   16 Size:    16 [unused]
        //   float4 gFloatArr1[4];              // Offset:   32 Size:    64 [unused]
        //      = 0xbf800000 0x3f800000 0x00000000 0x40000000 
        //        0x3f800000 0x3f800000 0x00000000 0x40400000 
        //        0xbf800000 0xbf800000 0x00000000 0x40800000 
        //        0x3f800000 0xbf800000 0x00000000 0x40a00000 
        //   int4 gInt1;                        // Offset:   96 Size:    16 [unused]
        //   int4 gInt2;                        // Offset:  112 Size:    16 [unused]
        //   bool gBool1;                       // Offset:  128 Size:     4 [unused]
        //   bool gBool2;                       // Offset:  132 Size:     4 [unused]
        //   float4x4 gMatrix1;                 // Offset:  144 Size:    64 [unused]
        //   
        //   struct cClass1
        //   {
        //       
        //       float4 foo;                    // Offset:  416
        //       float4 bar;                    // Offset:  432
        //
        //   } gAbstractInterface2;             // Offset:  208 Size:    32 [unused]
        //   
        //   struct cClass2
        //   {
        //       
        //       float4 foo;                    // Offset:  480
        //       float4 bar;                    // Offset:  496
        //
        //   } gAbstractInterface3;             // Offset:  240 Size:    32 [unused]
        //   float g_fTessellationFactor;       // Offset:  272 Size:     4
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim      HLSL Bind  Count
        // ------------------------------ ---------- ------- ----------- -------------- ------
        // $Globals                          cbuffer      NA          NA            cb0      1 
        //
        //
        //
        // Patch Constant signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // SV_TessFactor            0   x           0 QUADEDGE   float   x   
        // SV_TessFactor            1   x           1 QUADEDGE   float   x   
        // SV_TessFactor            2   x           2 QUADEDGE   float   x   
        // SV_TessFactor            3   x           3 QUADEDGE   float   x   
        // SV_InsideTessFactor      0   x           4  QUADINT   float   x   
        // SV_InsideTessFactor      1   x           5  QUADINT   float   x   
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // BEZIERPOS                0   xyz         0     NONE   float   xyz 
        //
        // Tessellation Domain   # of control points
        // -------------------- --------------------
        // Quadrilateral                          16
        //
        // Tessellation Output Primitive  Partitioning Type 
        // ------------------------------ ------------------
        // Clockwise Triangles            Integer           
        //
        hs_5_0
        hs_decls 
        dcl_input_control_point_count 16
        dcl_output_control_point_count 16
        dcl_tessellator_domain domain_quad
        dcl_tessellator_partitioning partitioning_integer
        dcl_tessellator_output_primitive output_triangle_cw
        dcl_globalFlags refactoringAllowed
        dcl_constantbuffer CB0[18], immediateIndexed
        hs_control_point_phase 
        dcl_input vOutputControlPointID
        dcl_input v[16][0].xyz
        dcl_output o0.xyz
        dcl_temps 1
        mov r0.x, vOutputControlPointID
        mov o0.xyz, v[r0.x + 0][0].xyzx
        ret 
        hs_fork_phase 
        dcl_hs_fork_phase_instance_count 4
        dcl_input vForkInstanceID
        dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
        dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
        dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
        dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
        dcl_temps 1
        dcl_indexrange o0.x 4
        mov r0.x, vForkInstanceID.x
        mov o[r0.x + 0].x, cb0[17].x
        ret 
        hs_fork_phase 
        dcl_hs_fork_phase_instance_count 2
        dcl_input vForkInstanceID
        dcl_output_siv o4.x, finalQuadUInsideTessFactor
        dcl_output_siv o5.x, finalQuadVInsideTessFactor
        dcl_temps 1
        dcl_indexrange o4.x 2
        mov r0.x, vForkInstanceID.x
        mov o[r0.x + 4].x, cb0[17].x
        ret 
        // Approximately 9 instruction slots used
            
    };
GeometryShader TestGeometryShader = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 10.1
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer $Globals
        // {
        //
        //   float4 gFloat1;                    // Offset:    0 Size:    16
        //   float4 gFloat2;                    // Offset:   16 Size:    16
        //   float4 gFloatArr1[4];              // Offset:   32 Size:    64 [unused]
        //      = 0xbf800000 0x3f800000 0x00000000 0x40000000 
        //        0x3f800000 0x3f800000 0x00000000 0x40400000 
        //        0xbf800000 0xbf800000 0x00000000 0x40800000 
        //        0x3f800000 0xbf800000 0x00000000 0x40a00000 
        //   int4 gInt1;                        // Offset:   96 Size:    16 [unused]
        //   int4 gInt2;                        // Offset:  112 Size:    16 [unused]
        //   bool gBool1;                       // Offset:  128 Size:     4 [unused]
        //   bool gBool2;                       // Offset:  132 Size:     4 [unused]
        //   float4x4 gMatrix1;                 // Offset:  144 Size:    64 [unused]
        //   
        //   struct cClass1
        //   {
        //       
        //       float4 foo;                    // Offset:  208
        //       float4 bar;                    // Offset:  224
        //
        //   } gAbstractInterface2;             // Offset:  208 Size:    32 [unused]
        //   
        //   struct cClass2
        //   {
        //       
        //       float4 foo;                    // Offset:  240
        //       float4 bar;                    // Offset:  256
        //
        //   } gAbstractInterface3;             // Offset:  240 Size:    32 [unused]
        //   float g_fTessellationFactor;       // Offset:  272 Size:     4 [unused]
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim      HLSL Bind  Count
        // ------------------------------ ---------- ------- ----------- -------------- ------
        // $Globals                          cbuffer      NA          NA            cb0      1 
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // TEXCOORD                 1   x           0     NONE    uint       
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // SV_Position              0   xyzw        0      POS   float   xyzw
        //
        gs_5_0
        dcl_globalFlags refactoringAllowed
        dcl_constantbuffer CB0[2], immediateIndexed
        dcl_input v[4][0].x
        dcl_temps 3
        dcl_inputprimitive lineadj 
        dcl_stream m0
        dcl_outputtopology pointlist 
        dcl_output_siv o0.xyzw, position
        dcl_maxout 144
        mul r0.xyzw, cb0[0].xyzw, cb0[1].xyzw
        mov r1.xyzw, l(0,0,0,0)
        mov r2.x, l(0)
        loop 
          ige r2.y, r2.x, l(4)
          breakc_nz r2.y
          mov o0.xyzw, r0.xyzw
          emit_stream m0
          iadd r2.x, r2.x, l(1)
          mov r1.xyzw, r0.xyzw
        endloop 
        cut_stream m0
        mov o0.xyzw, r1.xyzw
        emit_stream m0
        cut_stream m0
        mov o0.xyzw, r1.xyzw
        emit_stream m0
        ret 
        // Approximately 18 instruction slots used
            
    };

//
// 1 local interface(s)
//
iInterface1 gAbstractInterface1;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 RenderSceneWithTexture1Light11_2
    {
        pass P0
        {
            VertexShader = TestVertexShader5;
            PixelShader = TestPixelShader5;
            ComputeShader = TestComputeShader5;
        }

        pass P1
        {
            GeometryShader = TestGeometryShader;
        }

        pass P2
        {
            DomainShader = TestDomainShader5;
            HullShader = TestHullShader5;
        }

    }

}

