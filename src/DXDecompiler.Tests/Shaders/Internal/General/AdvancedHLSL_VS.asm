//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 gFloat1;                    // Offset:    0 Size:    16
//   float4 gFloat2;                    // Offset:   16 Size:    16
//   float4 gFloatArr1[4];              // Offset:   32 Size:    64
//      = 0xbf800000 0x3f800000 0x00000000 0x40000000 
//        0x3f800000 0x3f800000 0x00000000 0x40400000 
//        0xbf800000 0xbf800000 0x00000000 0x40800000 
//        0x3f800000 0xbf800000 0x00000000 0x40a00000 
//   int4 gInt1;                        // Offset:   96 Size:    16
//   int4 gInt2;                        // Offset:  112 Size:    16
//   bool gBool1;                       // Offset:  128 Size:     4
//   bool gBool2;                       // Offset:  132 Size:     4
//   float4x4 gMatrix1;                 // Offset:  144 Size:    64 [unused]
//   
//   struct cClass1
//   {
//       
//       float4 foo;                    // Offset:  208
//       float4 bar;                    // Offset:  224
//
//   } gAbstractInterface2;             // Offset:  208 Size:    32
//   
//   struct cClass2
//   {
//       
//       float4 foo;                    // Offset:  240
//       float4 bar;                    // Offset:  256
//
//   } gAbstractInterface3;             // Offset:  240 Size:    32
//   float g_fTessellationFactor;       // Offset:  272 Size:     4 [unused]
//
// }
//
// interfaces $ThisPointer
// {
//
//   interface iInterface1 gAbstractInterface1;// Offset:    0 Size:     1
//
// }
//
// cbuffer cbPerObject
// {
//
//   float4x4 g_mWorldViewProjection;   // Offset:    0 Size:    64
//   float4x4 g_mWorld;                 // Offset:   64 Size:    64
//   float4 g_vObjectColor;             // Offset:  128 Size:    16 [unused]
//
// }
//
// cbuffer cbuffer2
// {
//
//   struct bar
//   {
//       
//       float foofoo;                  // Offset:    0
//       float4x4 mat;                  // Offset:   16
//       uint foobar;                   // Offset:   80
//       
//       struct bar::<unnamed>
//       {
//           
//           float foo;                 // Offset:   96
//           float bar;                 // Offset:  100
//
//       } inner_struct_1;              // Offset:   96
//       
//       struct bar::<unnamed>
//       {
//           
//           float baz;                 // Offset:  112
//           float bug;                 // Offset:  116
//           
//           struct InnerStructTest
//           {
//               
//               float foo;             // Offset:  128
//               uint bar;              // Offset:  132
//               float baz;             // Offset:  136
//               int buz;               // Offset:  140
//               float4 f4;             // Offset:  144
//               float4 g4;             // Offset:  160
//               float oopsie;          // Offset:  176
//               float4 m4;             // Offset:  192
//
//           } inner_struct_3;          // Offset:  128
//
//       } inner_struct_2[2];           // Offset:  112
//       float foobaz;                  // Offset:  304
//       int foobuz[8];                 // Offset:  320
//       float binary_decompiler_array_size_calculation_looks_sketchy;// Offset:  436
//       int2 really[3];                // Offset:  448
//       float sketchy;                 // Offset:  488
//       float3 did[5];                 // Offset:  496
//       float i;                       // Offset:  572
//       float4 mention[7];             // Offset:  576
//       float how_sketchy;             // Offset:  688
//
//   } structVal1[2];                   // Offset:    0 Size:  1396
//   float dummy;                       // Offset: 1396 Size:     4 [unused]
//   
//   struct bar
//   {
//       
//       float foofoo;                  // Offset: 1408
//       float4x4 mat;                  // Offset: 1424
//       uint foobar;                   // Offset: 1488
//       
//       struct bar::<unnamed>
//       {
//           
//           float foo;                 // Offset: 1504
//           float bar;                 // Offset: 1508
//
//       } inner_struct_1;              // Offset: 1504
//       
//       struct bar::<unnamed>
//       {
//           
//           float baz;                 // Offset: 1520
//           float bug;                 // Offset: 1524
//           
//           struct InnerStructTest
//           {
//               
//               float foo;             // Offset: 1536
//               uint bar;              // Offset: 1540
//               float baz;             // Offset: 1544
//               int buz;               // Offset: 1548
//               float4 f4;             // Offset: 1552
//               float4 g4;             // Offset: 1568
//               float oopsie;          // Offset: 1584
//               float4 m4;             // Offset: 1600
//
//           } inner_struct_3;          // Offset: 1536
//
//       } inner_struct_2[2];           // Offset: 1520
//       float foobaz;                  // Offset: 1712
//       int foobuz[8];                 // Offset: 1728
//       float binary_decompiler_array_size_calculation_looks_sketchy;// Offset: 1844
//       int2 really[3];                // Offset: 1856
//       float sketchy;                 // Offset: 1896
//       float3 did[5];                 // Offset: 1904
//       float i;                       // Offset: 1980
//       float4 mention[7];             // Offset: 1984
//       float how_sketchy;             // Offset: 2096
//
//   } structVal2;                      // Offset: 1408 Size:   692
//   
//   struct <unnamed>
//   {
//       
//       float val1;                    // Offset: 2112
//       float val2;                    // Offset: 2116
//
//   } anonStruct1;                     // Offset: 2112 Size:     8 [unused]
//   
//   struct <unnamed>
//   {
//       
//       float2 val1;                   // Offset: 2128
//       float2 val2;                   // Offset: 2136
//
//   } anonStruct2;                     // Offset: 2128 Size:    16 [unused]
//
// }
//
// tbuffer TestTBuffer
// {
//
//   float4 g_TBval1;                   // Offset:    0 Size:    16
//   float3 g_TBpositions[4];           // Offset:   16 Size:    60
//      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
//        0x3f800000 0x3f800000 0x00000000 0x00000000 
//        0xbf800000 0xbf800000 0x00000000 0x00000000 
//        0x3f800000 0xbf800000 0x00000000 
//   float2 g_TBtexcoords[4];           // Offset:   80 Size:    56
//      = 0x00000000 0x3f800000 0x00000000 0x00000000 
//        0x3f800000 0x3f800000 0x00000000 0x00000000 
//        0x00000000 0x00000000 0x00000000 0x00000000 
//        0x3f800000 0x00000000 
//   
//   struct bar
//   {
//       
//       float foofoo;                  // Offset:  144
//       float4x4 mat;                  // Offset:  160
//       uint foobar;                   // Offset:  224
//       
//       struct bar::<unnamed>
//       {
//           
//           float foo;                 // Offset:  240
//           float bar;                 // Offset:  244
//
//       } inner_struct_1;              // Offset:  240
//       
//       struct bar::<unnamed>
//       {
//           
//           float baz;                 // Offset:  256
//           float bug;                 // Offset:  260
//           
//           struct InnerStructTest
//           {
//               
//               float foo;             // Offset:  272
//               uint bar;              // Offset:  276
//               float baz;             // Offset:  280
//               int buz;               // Offset:  284
//               float4 f4;             // Offset:  288
//               float4 g4;             // Offset:  304
//               float oopsie;          // Offset:  320
//               float4 m4;             // Offset:  336
//
//           } inner_struct_3;          // Offset:  272
//
//       } inner_struct_2[2];           // Offset:  256
//       float foobaz;                  // Offset:  448
//       int foobuz[8];                 // Offset:  464
//       float binary_decompiler_array_size_calculation_looks_sketchy;// Offset:  580
//       int2 really[3];                // Offset:  592
//       float sketchy;                 // Offset:  632
//       float3 did[5];                 // Offset:  640
//       float i;                       // Offset:  716
//       float4 mention[7];             // Offset:  720
//       float how_sketchy;             // Offset:  832
//
//   } structVal3;                      // Offset:  144 Size:   692
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// TestTBuffer                       tbuffer      NA          NA             t0      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// cbPerObject                       cbuffer      NA          NA            cb1      1 
// cbuffer2                          cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// NORMAL                   0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_POSITION              0   xyzw        2      POS   float   xyzw
// CUSTOM                   0   xyzw        3     NONE   float   xyzw
//
//
// Available Class Types:
//
// Name                             ID CB Stride Texture Sampler
// ------------------------------ ---- --------- ------- -------
// cClass2                           0         2       0       0
// cClass1                           1         2       0       0
//
// Available Class Instances:
//
// Name                        Type CB CB Offset Texture Sampler
// --------------------------- ---- -- --------- ------- -------
// gAbstractInterface2            1  0        13       -       -
// gAbstractInterface3            0  0        15       -       -
//
// Interface slots, 1 total:
//
//             Slots
// +----------+---------+---------------------------------------
// | Type ID  |   0     |0    1    
// | Table ID |         |0    1    
// +----------+---------+---------------------------------------
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[17], dynamicIndexed
dcl_constantbuffer CB1[7], immediateIndexed
dcl_constantbuffer CB2[96], dynamicIndexed
dcl_resource_buffer (mixed,mixed,mixed,mixed) t0
dcl_function_body fb0
dcl_function_body fb1
dcl_function_body fb2
dcl_function_body fb3
dcl_function_body fb4
dcl_function_body fb5
dcl_function_table ft0 = {fb0, fb2, fb4}
dcl_function_table ft1 = {fb1, fb3, fb5}
dcl_interface fp0[1][3] = {ft0, ft1}
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_output o0.xyz
dcl_output o1.xy
dcl_output_siv o2.xyzw, position
dcl_output o3.xyzw
dcl_temps 8
ld_indexable(buffer)(mixed,mixed,mixed,mixed) r0.xyzw, l(0, 0, 0, 0), t0.xyzw
ld_indexable(buffer)(mixed,mixed,mixed,mixed) r1.xyz, l(1, 1, 1, 1), t0.xyzw
ld_indexable(buffer)(mixed,mixed,mixed,mixed) r2.xyz, l(2, 2, 2, 2), t0.xyzw
ld_indexable(buffer)(mixed,mixed,mixed,mixed) r3.xyz, l(3, 3, 3, 3), t0.xyzw
ld_indexable(buffer)(mixed,mixed,mixed,mixed) r4.xy, l(8, 8, 8, 8), t0.xyzw
ld_indexable(buffer)(mixed,mixed,mixed,mixed) r1.w, l(34, 34, 34, 34), t0.yzwx
dp4 o2.x, v0.xyzw, cb1[0].xyzw
dp4 o2.y, v0.xyzw, cb1[1].xyzw
dp4 o2.z, v0.xyzw, cb1[2].xyzw
dp4 o2.w, v0.xyzw, cb1[3].xyzw
dp3 o0.x, v1.xyzx, cb1[4].xyzx
dp3 o0.y, v1.xyzx, cb1[5].xyzx
dp3 o0.z, v1.xyzx, cb1[6].xyzx
add r5.xyzw, cb0[0].xyzw, cb0[1].xyzw
add r6.xyzw, cb0[0].xyzw, -cb0[1].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mad r5.xyzw, cb0[0].xyzw, cb0[1].xyzw, r5.xyzw
div r6.xyzw, cb0[0].xyzw, cb0[1].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
sincos r6.xyzw, null, cb0[0].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
sincos r6.xyzw, r7.xyzw, cb0[1].xyzw
add r5.xyzw, r5.xyzw, r7.xyzw
div r7.xyzw, r6.xyzw, r7.xyzw
add r5.xyzw, r5.xyzw, r7.xyzw
dp4 r2.w, cb0[0].xyzw, cb0[1].xyzw
add r5.xyzw, r2.wwww, r5.xyzw
dp4 r2.w, cb0[0].xyzw, cb0[0].xyzw
sqrt r2.w, r2.w
add r5.xyzw, r2.wwww, r5.xyzw
log r7.xyzw, cb0[0].xyzw
mad r5.xyzw, r7.xyzw, l(0.693147, 0.693147, 0.693147, 0.693147), r5.xyzw
log r7.xyzw, cb0[1].xyzw
mad r5.xyzw, r7.xyzw, l(0.301030, 0.301030, 0.301030, 0.301030), r5.xyzw
max r7.xyzw, cb0[0].xyzw, cb0[1].xyzw
add r5.xyzw, r5.xyzw, r7.xyzw
dp4 r2.w, cb0[1].xyzw, cb0[1].xyzw
rsq r2.w, r2.w
mad r5.xyzw, cb0[1].xyzw, r2.wwww, r5.xyzw
mad r5.xyzw, cb0[1].xyzw, l(0.017453, 0.017453, 0.017453, 0.017453), r5.xyzw
round_z r7.xyzw, cb0[0].xyzw
add r5.xyzw, r5.xyzw, r7.xyzw
utof r2.w, cb2[49].x
add r2.w, r2.w, cb2[44].x
add r2.w, r2.w, cb2[50].x
add r2.w, r2.w, cb2[50].y
dp4 r7.x, cb0[0].xyzw, cb2[45].xyzw
dp4 r7.y, cb0[0].xyzw, cb2[46].xyzw
dp4 r7.z, cb0[0].xyzw, cb2[47].xyzw
dp4 r7.w, cb0[0].xyzw, cb2[48].xyzw
add r7.xyzw, r2.wwww, r7.xyzw
utof r2.w, cb2[58].y
add r7.xyzw, r2.wwww, r7.xyzw
add r7.xyzw, r7.xyzw, cb2[58].zzzz
add r7.xyzw, r7.xyzw, cb2[59].xyzw
add r7.xyzw, r7.xyzw, cb2[61].xxxx
add r7.xyzw, r7.xyzw, cb2[95].yyyy
add r0.xyzw, r0.xyzw, r7.xyzw
add r1.xyz, r1.xyzx, r0.xyzx
add r1.xyz, r2.xyzx, r1.xyzx
add r0.xyz, r3.xyzx, r1.xyzx
mov r4.zw, l(0,0,0,0)
add r0.xyzw, r0.xyzw, r4.xyzw
itof r1.x, r1.w
add r0.xyzw, r0.xyzw, r1.xxxx
add r0.xyzw, r0.xyzw, r5.xyzw
imul null, r1.x, l(44), cb0[6].x
iadd r1.y, l(1), cb0[7].x
ld_indexable(buffer)(mixed,mixed,mixed,mixed) r2.xyz, r1.yyyy, t0.xyzw
mov r2.w, l(0)
add r1.xyzw, r2.xyzw, cb2[r1.x + 0].xxxx
mov r2.x, cb0[6].y
add r1.xyzw, r1.xyzw, cb0[r2.x + 2].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
fcall fp0[0][0]
fcall fp0[0][1]
add r1.xyzw, r1.xyzw, r2.xyzw
fcall fp0[0][2]
add r1.xyzw, r1.xyzw, r2.xyzw
add r2.xyzw, r6.xyzw, cb0[13].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mad r1.xyzw, cb0[1].xyzw, l(55.000000, 55.000000, 55.000000, 55.000000), r1.xyzw
sqrt r2.xyzw, cb0[15].xyzw
add r2.xyzw, r2.xyzw, cb0[1].xyzw
add r2.xyzw, r2.xyzw, cb0[0].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
log r2.xyzw, cb0[16].xyzw
mad r2.xyzw, r2.xyzw, l(0.693147, 0.693147, 0.693147, 0.693147), cb0[1].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mov r1.xyzw, l(0,0,0,0)
mov r2.x, l(0)
loop 
  ige r2.y, r2.x, cb0[6].x
  breakc_nz r2.y
  add r1.xyzw, r1.xyzw, cb0[0].xyzw
  iadd r2.x, r2.x, l(1)
endloop 
switch cb0[6].x
  case l(1)
  add r2.xyzw, r1.xyzw, cb0[0].xyzw
  break 
  case l(2)
  add r2.xyzw, r1.xyzw, cb0[1].xyzw
  break 
  case l(3)
  movc r3.x, cb0[8].x, l(1.000000), l(0)
  add r2.xyzw, r1.xyzw, r3.xxxx
  break 
  default 
  movc r3.x, cb0[8].y, l(1.000000), l(0)
  add r2.xyzw, r1.xyzw, r3.xxxx
  break 
endswitch 
mov r1.xyzw, r2.xyzw
loop 
  lt r3.x, cb0[0].x, r1.x
  if_nz r3.x
    break 
  endif 
  add r1.xyzw, r1.xyzw, cb0[0].xyzw
endloop 
ilt r2.x, cb0[7].z, cb0[6].y
add r3.xyzw, r1.xyzw, cb0[0].xyzw
add r1.xyzw, r1.xyzw, cb0[1].xyzw
movc r1.xyzw, r2.xxxx, r3.xyzw, r1.xyzw
add r1.xyzw, r1.xyzw, cb0[1].xyzw
ine r2.xy, l(0, 0, 0, 0), cb0[8].xyxx
ieq r2.x, r2.y, r2.x
mov r3.xyzw, r1.xyzw
loop 
  ge r2.y, cb0[0].y, r3.y
  breakc_nz r2.y
  add r4.xyzw, r3.xyzw, cb0[1].xyzw
  if_nz r2.x
    mov r3.xyzw, r4.xyzw
    continue 
  endif 
  mov r3.xyzw, r4.xyzw
endloop 
add o3.xyzw, r0.xyzw, r3.xyzw
mov o1.xy, v2.xyxx
ret 
label fb0
mov r2.xy, this[0].yxyy
sqrt r2.xyzw, cb[r2.y + 0][r2.x + 0].xyzw
add r2.xyzw, r2.xyzw, cb0[1].xyzw
add r1.xyzw, r2.xyzw, cb0[0].xyzw
ret 
label fb1
mov r2.xy, this[0].yxyy
add r1.xyzw, r6.xyzw, cb[r2.y + 0][r2.x + 0].xyzw
ret 
label fb2
mov r3.xy, this[0].yxyy
log r3.xyzw, cb[r3.y + 0][r3.x + 1].xyzw
mad r2.xyzw, r3.xyzw, l(0.693147, 0.693147, 0.693147, 0.693147), cb0[1].xyzw
ret 
label fb3
mul r2.xyzw, l(55.000000, 55.000000, 55.000000, 55.000000), cb0[1].xyzw
ret 
label fb4
mov r3.xy, this[0].yxyy
sqrt r3.xyzw, cb[r3.y + 0][r3.x + 0].xyzw
add r3.xyzw, r3.xyzw, cb0[1].xyzw
add r2.xyzw, r3.xyzw, cb0[0].xyzw
ret 
label fb5
mov r3.xy, this[0].yxyy
add r2.xyzw, r6.xyzw, cb[r3.y + 0][r3.x + 0].xyzw
ret 
// Approximately 165 instruction slots used
