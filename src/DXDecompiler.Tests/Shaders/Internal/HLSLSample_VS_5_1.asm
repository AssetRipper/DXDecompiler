//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 g_MaterialAmbientColor;     // Offset:    0 Size:    16
//   float4 g_MaterialDiffuseColor;     // Offset:   16 Size:    16
//   int g_nNumLights;                  // Offset:   32 Size:     4 [unused]
//   float3 g_LightDir;                 // Offset:   36 Size:    12
//   float4 g_LightDiffuse;             // Offset:   48 Size:    16
//   float4 g_LightAmbient;             // Offset:   64 Size:    16
//   float g_fTime;                     // Offset:   80 Size:     4 [unused]
//   float4x4 g_mWorld;                 // Offset:   96 Size:    64
//   float4x4 g_mWorldViewProjection;   // Offset:  160 Size:    64
//
// }
//
// cbuffer $Params
// {
//
//   int nNumLights;                    // Offset:    0 Size:     4
//   bool bTexture;                     // Offset:    4 Size:     4
//   bool bAnimate;                     // Offset:    8 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// $Globals                          cbuffer      NA          NA     CB0            cb0      1 
// $Params                           cbuffer      NA          NA     CB1            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
vs_5_1
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[0:0][14], immediateIndexed, space=0
dcl_constantbuffer CB1[1:1][1], immediateIndexed, space=0
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_temps 2
dp4 o0.x, v0.xyzw, CB0[0][10].xyzw
dp4 o0.y, v0.xyzw, CB0[0][11].xyzw
dp4 o0.z, v0.xyzw, CB0[0][12].xyzw
dp4 o0.w, v0.xyzw, CB0[0][13].xyzw
dp3 r0.x, v1.xyzx, CB0[0][6].xyzx
dp3 r0.y, v1.xyzx, CB0[0][7].xyzx
dp3 r0.z, v1.xyzx, CB0[0][8].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mov r1.xyz, l(0,0,0,0)
mov r0.w, l(0)
loop 
  ige r1.w, r0.w, CB1[1][0].x
  breakc_nz r1.w
  dp3 r1.w, r0.xyzx, CB0[0][2].yzwy
  max r1.w, r1.w, l(0.000000)
  mad r1.xyz, CB0[0][3].xyzx, r1.wwww, r1.xyzx
  iadd r0.w, r0.w, l(1)
endloop 
mul r0.xyz, CB0[0][0].xyzx, CB0[0][4].xyzx
mad o1.xyz, CB0[0][1].xyzx, r1.xyzx, r0.xyzx
if_nz CB1[1][0].y
  mov o2.xy, v2.xyxx
else 
  mov o2.xy, l(0,0,0,0)
endif 
mov o1.w, l(1.000000)
ret 
// Approximately 29 instruction slots used
