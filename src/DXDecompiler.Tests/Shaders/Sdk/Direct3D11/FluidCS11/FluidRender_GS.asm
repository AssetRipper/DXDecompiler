//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbRenderConstants
// {
//
//   float4x4 g_mViewProjection;        // Offset:    0 Size:    64
//   float g_fParticleSize;             // Offset:   64 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cbRenderConstants                 cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xy          0     NONE   float   xy  
// COLOR                    0   xyzw        1     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
gs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[5], immediateIndexed
dcl_input v[1][0].xy
dcl_input v[1][1].xyzw
dcl_temps 2
dcl_inputprimitive point 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_maxout 4
mov r0.xy, v[0][0].xyxx
mov r0.z, l(1.000000)
mad r1.xyz, cb0[4].xxxx, l(-1.000000, 1.000000, 0.000000, 0.000000), r0.xyzx
dp3 r0.w, r1.xyzx, cb0[0].xywx
mov o0.x, r0.w
dp3 r0.w, r1.xyzx, cb0[1].xywx
mov o0.y, r0.w
dp3 r0.w, r1.xyzx, cb0[2].xywx
dp3 r1.x, r1.xyzx, cb0[3].xywx
mov o0.z, r0.w
mov o0.w, r1.x
mov o1.xyzw, v[0][1].xyzw
mov o2.xy, l(0,1.000000,0,0)
emit_stream m0
mad r1.xyz, cb0[4].xxxx, l(1.000000, 1.000000, 0.000000, 0.000000), r0.xyzx
dp3 r0.w, r1.xyzx, cb0[0].xywx
mov o0.x, r0.w
dp3 r0.w, r1.xyzx, cb0[1].xywx
mov o0.y, r0.w
dp3 r0.w, r1.xyzx, cb0[2].xywx
dp3 r1.x, r1.xyzx, cb0[3].xywx
mov o0.z, r0.w
mov o0.w, r1.x
mov o1.xyzw, v[0][1].xyzw
mov o2.xy, l(1.000000,1.000000,0,0)
emit_stream m0
mad r1.xyz, cb0[4].xxxx, l(-1.000000, -1.000000, 0.000000, 0.000000), r0.xyzx
mad r0.xyz, cb0[4].xxxx, l(1.000000, -1.000000, 0.000000, 0.000000), r0.xyzx
dp3 r0.w, r1.xyzx, cb0[0].xywx
mov o0.x, r0.w
dp3 r0.w, r1.xyzx, cb0[1].xywx
mov o0.y, r0.w
dp3 r0.w, r1.xyzx, cb0[2].xywx
dp3 r1.x, r1.xyzx, cb0[3].xywx
mov o0.z, r0.w
mov o0.w, r1.x
mov o1.xyzw, v[0][1].xyzw
mov o2.xy, l(0,0,0,0)
emit_stream m0
dp3 r0.w, r0.xyzx, cb0[0].xywx
mov o0.x, r0.w
dp3 r0.w, r0.xyzx, cb0[1].xywx
mov o0.y, r0.w
dp3 r0.w, r0.xyzx, cb0[2].xywx
dp3 r0.x, r0.xyzx, cb0[3].xywx
mov o0.z, r0.w
mov o0.w, r0.x
mov o1.xyzw, v[0][1].xyzw
mov o2.xy, l(1.000000,0,0,0)
emit_stream m0
cut_stream m0
ret 
// Approximately 52 instruction slots used
